// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: offchain_transmission.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDataResponse_Type int32

const (
	GetDataResponse_DATA_GET_SUCCESS      GetDataResponse_Type = 0
	GetDataResponse_DATA_OUT_OF_SIZE      GetDataResponse_Type = 1
	GetDataResponse_DATA_GET_INTERNAL_ERR GetDataResponse_Type = 2
)

var GetDataResponse_Type_name = map[int32]string{
	0: "DATA_GET_SUCCESS",
	1: "DATA_OUT_OF_SIZE",
	2: "DATA_GET_INTERNAL_ERR",
}

var GetDataResponse_Type_value = map[string]int32{
	"DATA_GET_SUCCESS":      0,
	"DATA_OUT_OF_SIZE":      1,
	"DATA_GET_INTERNAL_ERR": 2,
}

func (x GetDataResponse_Type) String() string {
	return proto.EnumName(GetDataResponse_Type_name, int32(x))
}

func (GetDataResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4554c4eea08b0029, []int{1, 0}
}

type GetDataRequest struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	From  string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To    string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Req   []byte `protobuf:"bytes,4,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *GetDataRequest) Reset()         { *m = GetDataRequest{} }
func (m *GetDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetDataRequest) ProtoMessage()    {}
func (*GetDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4554c4eea08b0029, []int{0}
}
func (m *GetDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataRequest.Merge(m, src)
}
func (m *GetDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataRequest proto.InternalMessageInfo

func (m *GetDataRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetDataRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetDataRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *GetDataRequest) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

type GetDataResponse struct {
	Index    uint64               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	From     string               `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To       string               `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Type     GetDataResponse_Type `protobuf:"varint,4,opt,name=type,proto3,enum=pb.GetDataResponse_Type" json:"type,omitempty"`
	Msg      string               `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Data     []byte               `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	ShardTag *ShardIdentification `protobuf:"bytes,7,opt,name=shard_tag,json=shardTag,proto3" json:"shard_tag,omitempty"`
}

func (m *GetDataResponse) Reset()         { *m = GetDataResponse{} }
func (m *GetDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetDataResponse) ProtoMessage()    {}
func (*GetDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4554c4eea08b0029, []int{1}
}
func (m *GetDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataResponse.Merge(m, src)
}
func (m *GetDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataResponse proto.InternalMessageInfo

func (m *GetDataResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetDataResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetDataResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *GetDataResponse) GetType() GetDataResponse_Type {
	if m != nil {
		return m.Type
	}
	return GetDataResponse_DATA_GET_SUCCESS
}

func (m *GetDataResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetDataResponse) GetShardTag() *ShardIdentification {
	if m != nil {
		return m.ShardTag
	}
	return nil
}

type ShardIdentification struct {
	IsShard    bool   `protobuf:"varint,1,opt,name=is_shard,json=isShard,proto3" json:"is_shard,omitempty"`
	ShardSize  uint64 `protobuf:"varint,2,opt,name=shard_size,json=shardSize,proto3" json:"shard_size,omitempty"`
	ShardIndex uint64 `protobuf:"varint,3,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty"`
}

func (m *ShardIdentification) Reset()         { *m = ShardIdentification{} }
func (m *ShardIdentification) String() string { return proto.CompactTextString(m) }
func (*ShardIdentification) ProtoMessage()    {}
func (*ShardIdentification) Descriptor() ([]byte, []int) {
	return fileDescriptor_4554c4eea08b0029, []int{2}
}
func (m *ShardIdentification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardIdentification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardIdentification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardIdentification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardIdentification.Merge(m, src)
}
func (m *ShardIdentification) XXX_Size() int {
	return m.Size()
}
func (m *ShardIdentification) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardIdentification.DiscardUnknown(m)
}

var xxx_messageInfo_ShardIdentification proto.InternalMessageInfo

func (m *ShardIdentification) GetIsShard() bool {
	if m != nil {
		return m.IsShard
	}
	return false
}

func (m *ShardIdentification) GetShardSize() uint64 {
	if m != nil {
		return m.ShardSize
	}
	return 0
}

func (m *ShardIdentification) GetShardIndex() uint64 {
	if m != nil {
		return m.ShardIndex
	}
	return 0
}

type OffChainDataInfo struct {
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Filesize int64  `protobuf:"varint,2,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Filepath string `protobuf:"bytes,3,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (m *OffChainDataInfo) Reset()         { *m = OffChainDataInfo{} }
func (m *OffChainDataInfo) String() string { return proto.CompactTextString(m) }
func (*OffChainDataInfo) ProtoMessage()    {}
func (*OffChainDataInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4554c4eea08b0029, []int{3}
}
func (m *OffChainDataInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffChainDataInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffChainDataInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffChainDataInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffChainDataInfo.Merge(m, src)
}
func (m *OffChainDataInfo) XXX_Size() int {
	return m.Size()
}
func (m *OffChainDataInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OffChainDataInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OffChainDataInfo proto.InternalMessageInfo

func (m *OffChainDataInfo) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *OffChainDataInfo) GetFilesize() int64 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *OffChainDataInfo) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

type ConnectInfo struct {
	PierId   string `protobuf:"bytes,1,opt,name=pierId,proto3" json:"pierId,omitempty"`
	AddrInfo []byte `protobuf:"bytes,2,opt,name=addrInfo,proto3" json:"addrInfo,omitempty"`
}

func (m *ConnectInfo) Reset()         { *m = ConnectInfo{} }
func (m *ConnectInfo) String() string { return proto.CompactTextString(m) }
func (*ConnectInfo) ProtoMessage()    {}
func (*ConnectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4554c4eea08b0029, []int{4}
}
func (m *ConnectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectInfo.Merge(m, src)
}
func (m *ConnectInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConnectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectInfo proto.InternalMessageInfo

func (m *ConnectInfo) GetPierId() string {
	if m != nil {
		return m.PierId
	}
	return ""
}

func (m *ConnectInfo) GetAddrInfo() []byte {
	if m != nil {
		return m.AddrInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.GetDataResponse_Type", GetDataResponse_Type_name, GetDataResponse_Type_value)
	proto.RegisterType((*GetDataRequest)(nil), "pb.GetDataRequest")
	proto.RegisterType((*GetDataResponse)(nil), "pb.GetDataResponse")
	proto.RegisterType((*ShardIdentification)(nil), "pb.ShardIdentification")
	proto.RegisterType((*OffChainDataInfo)(nil), "pb.OffChainDataInfo")
	proto.RegisterType((*ConnectInfo)(nil), "pb.ConnectInfo")
}

func init() { proto.RegisterFile("offchain_transmission.proto", fileDescriptor_4554c4eea08b0029) }

var fileDescriptor_4554c4eea08b0029 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xd1, 0x6e, 0xd3, 0x3e,
	0x14, 0xc6, 0x9b, 0x34, 0xed, 0xda, 0xd3, 0xa9, 0xff, 0xc8, 0xff, 0x01, 0x19, 0x88, 0xac, 0xca,
	0x55, 0x2f, 0x50, 0x90, 0x06, 0x2f, 0x50, 0xba, 0x30, 0x45, 0x82, 0x55, 0x72, 0xb2, 0x9b, 0x09,
	0x29, 0x72, 0x1b, 0xa7, 0xb5, 0x44, 0x6d, 0x2f, 0x36, 0x12, 0xdb, 0x53, 0xf0, 0x10, 0x3c, 0x0c,
	0x97, 0xbb, 0xe4, 0x12, 0xb5, 0x2f, 0x82, 0xec, 0x74, 0xb9, 0x40, 0xdc, 0x71, 0x77, 0xbe, 0x73,
	0x3e, 0x7f, 0x3f, 0xe7, 0xc4, 0xf0, 0x42, 0x54, 0xd5, 0x6a, 0x43, 0x18, 0x2f, 0x74, 0x4d, 0xb8,
	0xda, 0x32, 0xa5, 0x98, 0xe0, 0xb1, 0xac, 0x85, 0x16, 0xc8, 0x95, 0xcb, 0xe8, 0x13, 0x8c, 0x2f,
	0xa9, 0xbe, 0x20, 0x9a, 0x60, 0x7a, 0xfb, 0x85, 0x2a, 0x8d, 0x4e, 0xa0, 0xc7, 0x78, 0x49, 0xbf,
	0x06, 0xce, 0xc4, 0x99, 0x7a, 0xb8, 0x11, 0x08, 0x81, 0x57, 0xd5, 0x62, 0x1b, 0xb8, 0x13, 0x67,
	0x3a, 0xc4, 0xb6, 0x46, 0x63, 0x70, 0xb5, 0x08, 0xba, 0xb6, 0xe3, 0x6a, 0x81, 0x7c, 0xe8, 0xd6,
	0xf4, 0x36, 0xf0, 0x26, 0xce, 0xf4, 0x18, 0x9b, 0x32, 0xfa, 0xee, 0xc2, 0x7f, 0x6d, 0xbc, 0x92,
	0x82, 0x2b, 0xfa, 0x0f, 0xf9, 0xaf, 0xc0, 0xd3, 0x77, 0x92, 0x5a, 0xc0, 0xf8, 0x3c, 0x88, 0xe5,
	0x32, 0xfe, 0x23, 0x3c, 0xce, 0xef, 0x24, 0xc5, 0xd6, 0x65, 0x6e, 0xb3, 0x55, 0xeb, 0xa0, 0x67,
	0x8f, 0x9b, 0xd2, 0x30, 0x4a, 0xa2, 0x49, 0xd0, 0xb7, 0x17, 0xb4, 0x35, 0x7a, 0x0b, 0x43, 0xb5,
	0x21, 0x75, 0x59, 0x68, 0xb2, 0x0e, 0x8e, 0x26, 0xce, 0x74, 0x74, 0xfe, 0xcc, 0x04, 0x67, 0xa6,
	0x99, 0x96, 0x94, 0x6b, 0x56, 0xb1, 0x15, 0xd1, 0x4c, 0x70, 0x3c, 0xb0, 0xce, 0x9c, 0xac, 0xa3,
	0x8f, 0xe0, 0x19, 0x12, 0x3a, 0x01, 0xff, 0x62, 0x96, 0xcf, 0x8a, 0xcb, 0x24, 0x2f, 0xb2, 0xeb,
	0xf9, 0x3c, 0xc9, 0x32, 0xbf, 0xd3, 0x76, 0x17, 0xd7, 0x79, 0xb1, 0x78, 0x5f, 0x64, 0xe9, 0x4d,
	0xe2, 0x3b, 0xe8, 0x14, 0x9e, 0xb4, 0xde, 0xf4, 0x2a, 0x4f, 0xf0, 0xd5, 0xec, 0x43, 0x91, 0x60,
	0xec, 0xbb, 0x91, 0x84, 0xff, 0xff, 0xc2, 0x43, 0xa7, 0x30, 0x60, 0xaa, 0xb0, 0x50, 0xbb, 0xac,
	0x01, 0x3e, 0x62, 0xca, 0x1a, 0xd1, 0x4b, 0x80, 0xe6, 0xda, 0x8a, 0xdd, 0x53, 0xbb, 0x34, 0x0f,
	0x37, 0x1f, 0x92, 0xb1, 0x7b, 0x8a, 0xce, 0x60, 0xd4, 0x8c, 0x9b, 0x4d, 0x77, 0xed, 0xbc, 0x39,
	0x91, 0x9a, 0x4e, 0x54, 0x81, 0xbf, 0xa8, 0xaa, 0xb9, 0x79, 0x19, 0x66, 0x7f, 0x29, 0xaf, 0x04,
	0x7a, 0x0e, 0x83, 0x8a, 0x7d, 0xa6, 0x9c, 0x6c, 0xa9, 0xc5, 0x0d, 0x71, 0xab, 0x1f, 0x67, 0x2d,
	0xad, 0x8b, 0x5b, 0xfd, 0x38, 0x93, 0x44, 0x6f, 0x0e, 0x3f, 0xab, 0xd5, 0xd1, 0x0c, 0x46, 0x73,
	0xc1, 0x39, 0x5d, 0x69, 0x8b, 0x78, 0x0a, 0x7d, 0xc9, 0x68, 0x9d, 0x96, 0x07, 0xc0, 0x41, 0x99,
	0x08, 0x52, 0x96, 0xb5, 0xf1, 0xd8, 0xf8, 0x63, 0xdc, 0xea, 0x77, 0x67, 0x3f, 0x76, 0xa1, 0xf3,
	0xb0, 0x0b, 0x9d, 0x5f, 0xbb, 0xd0, 0xf9, 0xb6, 0x0f, 0x3b, 0x0f, 0xfb, 0xb0, 0xf3, 0x73, 0x1f,
	0x76, 0x6e, 0x7a, 0x71, 0xfc, 0x5a, 0x2e, 0x97, 0x7d, 0xfb, 0x9a, 0xdf, 0xfc, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0xff, 0x4d, 0xe1, 0x68, 0xec, 0x02, 0x00, 0x00,
}

func (m *GetDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardTag != nil {
		{
			size, err := m.ShardTag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOffchainTransmission(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardIdentification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardIndex != 0 {
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(m.ShardIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ShardSize != 0 {
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(m.ShardSize))
		i--
		dAtA[i] = 0x10
	}
	if m.IsShard {
		i--
		if m.IsShard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OffChainDataInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffChainDataInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffChainDataInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filepath) > 0 {
		i -= len(m.Filepath)
		copy(dAtA[i:], m.Filepath)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.Filepath)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Filesize != 0 {
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddrInfo) > 0 {
		i -= len(m.AddrInfo)
		copy(dAtA[i:], m.AddrInfo)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.AddrInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PierId) > 0 {
		i -= len(m.PierId)
		copy(dAtA[i:], m.PierId)
		i = encodeVarintOffchainTransmission(dAtA, i, uint64(len(m.PierId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOffchainTransmission(dAtA []byte, offset int, v uint64) int {
	offset -= sovOffchainTransmission(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovOffchainTransmission(uint64(m.Index))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	return n
}

func (m *GetDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovOffchainTransmission(uint64(m.Index))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOffchainTransmission(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	if m.ShardTag != nil {
		l = m.ShardTag.Size()
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	return n
}

func (m *ShardIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsShard {
		n += 2
	}
	if m.ShardSize != 0 {
		n += 1 + sovOffchainTransmission(uint64(m.ShardSize))
	}
	if m.ShardIndex != 0 {
		n += 1 + sovOffchainTransmission(uint64(m.ShardIndex))
	}
	return n
}

func (m *OffChainDataInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	if m.Filesize != 0 {
		n += 1 + sovOffchainTransmission(uint64(m.Filesize))
	}
	l = len(m.Filepath)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	return n
}

func (m *ConnectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PierId)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	l = len(m.AddrInfo)
	if l > 0 {
		n += 1 + l + sovOffchainTransmission(uint64(l))
	}
	return n
}

func sovOffchainTransmission(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOffchainTransmission(x uint64) (n int) {
	return sovOffchainTransmission(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffchainTransmission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffchainTransmission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffchainTransmission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GetDataResponse_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardTag == nil {
				m.ShardTag = &ShardIdentification{}
			}
			if err := m.ShardTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffchainTransmission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardIdentification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffchainTransmission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardIdentification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardIdentification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShard = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardSize", wireType)
			}
			m.ShardSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndex", wireType)
			}
			m.ShardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOffchainTransmission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffChainDataInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffchainTransmission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffChainDataInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffChainDataInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filepath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filepath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffchainTransmission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffchainTransmission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PierId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PierId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrInfo = append(m.AddrInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrInfo == nil {
				m.AddrInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffchainTransmission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffchainTransmission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOffchainTransmission(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOffchainTransmission
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffchainTransmission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOffchainTransmission
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOffchainTransmission
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOffchainTransmission
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOffchainTransmission        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOffchainTransmission          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOffchainTransmission = fmt.Errorf("proto: unexpected end of group")
)
