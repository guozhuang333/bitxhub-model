// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keti3.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 网关直连传输
type GetDataResponseResult struct {
	DataInfo   []*DataInfo                               `protobuf:"bytes,1,rep,name=dataInfo,proto3" json:"dataInfo,omitempty"`
	DataResult []*GetDataResponseResult_ResponseDataInfo `protobuf:"bytes,2,rep,name=dataResult,proto3" json:"dataResult,omitempty"`
}

func (m *GetDataResponseResult) Reset()         { *m = GetDataResponseResult{} }
func (m *GetDataResponseResult) String() string { return proto.CompactTextString(m) }
func (*GetDataResponseResult) ProtoMessage()    {}
func (*GetDataResponseResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{0}
}
func (m *GetDataResponseResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataResponseResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataResponseResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataResponseResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataResponseResult.Merge(m, src)
}
func (m *GetDataResponseResult) XXX_Size() int {
	return m.Size()
}
func (m *GetDataResponseResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataResponseResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataResponseResult proto.InternalMessageInfo

func (m *GetDataResponseResult) GetDataInfo() []*DataInfo {
	if m != nil {
		return m.DataInfo
	}
	return nil
}

func (m *GetDataResponseResult) GetDataResult() []*GetDataResponseResult_ResponseDataInfo {
	if m != nil {
		return m.DataResult
	}
	return nil
}

type GetDataResponseResult_ResponseDataInfo struct {
	CrsDataSN  string `protobuf:"bytes,1,opt,name=crsDataSN,proto3" json:"crsDataSN,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body       []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	BodyName   string `protobuf:"bytes,4,opt,name=bodyName,proto3" json:"bodyName,omitempty"`
	Result     bool   `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	DownErrMsg string `protobuf:"bytes,6,opt,name=downErrMsg,proto3" json:"downErrMsg,omitempty"`
}

func (m *GetDataResponseResult_ResponseDataInfo) Reset() {
	*m = GetDataResponseResult_ResponseDataInfo{}
}
func (m *GetDataResponseResult_ResponseDataInfo) String() string { return proto.CompactTextString(m) }
func (*GetDataResponseResult_ResponseDataInfo) ProtoMessage()    {}
func (*GetDataResponseResult_ResponseDataInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{0, 0}
}
func (m *GetDataResponseResult_ResponseDataInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataResponseResult_ResponseDataInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataResponseResult_ResponseDataInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataResponseResult_ResponseDataInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataResponseResult_ResponseDataInfo.Merge(m, src)
}
func (m *GetDataResponseResult_ResponseDataInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetDataResponseResult_ResponseDataInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataResponseResult_ResponseDataInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataResponseResult_ResponseDataInfo proto.InternalMessageInfo

func (m *GetDataResponseResult_ResponseDataInfo) GetCrsDataSN() string {
	if m != nil {
		return m.CrsDataSN
	}
	return ""
}

func (m *GetDataResponseResult_ResponseDataInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetDataResponseResult_ResponseDataInfo) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *GetDataResponseResult_ResponseDataInfo) GetBodyName() string {
	if m != nil {
		return m.BodyName
	}
	return ""
}

func (m *GetDataResponseResult_ResponseDataInfo) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *GetDataResponseResult_ResponseDataInfo) GetDownErrMsg() string {
	if m != nil {
		return m.DownErrMsg
	}
	return ""
}

// req请求时填入FJS字段
type ReqFJS struct {
	ReqInfo           *RequestInfo       `protobuf:"bytes,1,opt,name=reqInfo,proto3" json:"reqInfo,omitempty"`
	ArrivalNoticeInfo *ArrivalNoticeInfo `protobuf:"bytes,2,opt,name=arrivalNoticeInfo,proto3" json:"arrivalNoticeInfo,omitempty"`
}

func (m *ReqFJS) Reset()         { *m = ReqFJS{} }
func (m *ReqFJS) String() string { return proto.CompactTextString(m) }
func (*ReqFJS) ProtoMessage()    {}
func (*ReqFJS) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{1}
}
func (m *ReqFJS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqFJS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqFJS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqFJS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqFJS.Merge(m, src)
}
func (m *ReqFJS) XXX_Size() int {
	return m.Size()
}
func (m *ReqFJS) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqFJS.DiscardUnknown(m)
}

var xxx_messageInfo_ReqFJS proto.InternalMessageInfo

func (m *ReqFJS) GetReqInfo() *RequestInfo {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *ReqFJS) GetArrivalNoticeInfo() *ArrivalNoticeInfo {
	if m != nil {
		return m.ArrivalNoticeInfo
	}
	return nil
}

type RequestInfo struct {
	Unicode      string        `protobuf:"bytes,1,opt,name=unicode,proto3" json:"unicode,omitempty"`
	CrsChnTxType string        `protobuf:"bytes,2,opt,name=crsChnTxType,proto3" json:"crsChnTxType,omitempty"`
	CrsBizFlowID string        `protobuf:"bytes,3,opt,name=crsBizFlowID,proto3" json:"crsBizFlowID,omitempty"`
	DataInfo     []*DataInfo   `protobuf:"bytes,4,rep,name=dataInfo,proto3" json:"dataInfo,omitempty"`
	ScCallInfo   []*SCCallInfo `protobuf:"bytes,5,rep,name=scCallInfo,proto3" json:"scCallInfo,omitempty"`
}

func (m *RequestInfo) Reset()         { *m = RequestInfo{} }
func (m *RequestInfo) String() string { return proto.CompactTextString(m) }
func (*RequestInfo) ProtoMessage()    {}
func (*RequestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{2}
}
func (m *RequestInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestInfo.Merge(m, src)
}
func (m *RequestInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestInfo proto.InternalMessageInfo

func (m *RequestInfo) GetUnicode() string {
	if m != nil {
		return m.Unicode
	}
	return ""
}

func (m *RequestInfo) GetCrsChnTxType() string {
	if m != nil {
		return m.CrsChnTxType
	}
	return ""
}

func (m *RequestInfo) GetCrsBizFlowID() string {
	if m != nil {
		return m.CrsBizFlowID
	}
	return ""
}

func (m *RequestInfo) GetDataInfo() []*DataInfo {
	if m != nil {
		return m.DataInfo
	}
	return nil
}

func (m *RequestInfo) GetScCallInfo() []*SCCallInfo {
	if m != nil {
		return m.ScCallInfo
	}
	return nil
}

type DataInfo struct {
	CrsDataSN   string        `protobuf:"bytes,1,opt,name=crsDataSN,proto3" json:"crsDataSN,omitempty"`
	Type        string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	SrcDataID   string        `protobuf:"bytes,3,opt,name=srcDataID,proto3" json:"srcDataID,omitempty"`
	SrcLocation []*ConfigInfo `protobuf:"bytes,4,rep,name=srcLocation,proto3" json:"srcLocation,omitempty"`
	DataHash    string        `protobuf:"bytes,5,opt,name=dataHash,proto3" json:"dataHash,omitempty"`
	Size_       int64         `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Cipher      *CipherInfo   `protobuf:"bytes,7,opt,name=cipher,proto3" json:"cipher,omitempty"`
}

func (m *DataInfo) Reset()         { *m = DataInfo{} }
func (m *DataInfo) String() string { return proto.CompactTextString(m) }
func (*DataInfo) ProtoMessage()    {}
func (*DataInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{3}
}
func (m *DataInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataInfo.Merge(m, src)
}
func (m *DataInfo) XXX_Size() int {
	return m.Size()
}
func (m *DataInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DataInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DataInfo proto.InternalMessageInfo

func (m *DataInfo) GetCrsDataSN() string {
	if m != nil {
		return m.CrsDataSN
	}
	return ""
}

func (m *DataInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DataInfo) GetSrcDataID() string {
	if m != nil {
		return m.SrcDataID
	}
	return ""
}

func (m *DataInfo) GetSrcLocation() []*ConfigInfo {
	if m != nil {
		return m.SrcLocation
	}
	return nil
}

func (m *DataInfo) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *DataInfo) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *DataInfo) GetCipher() *CipherInfo {
	if m != nil {
		return m.Cipher
	}
	return nil
}

type CipherInfo struct {
	EncryptedKey string `protobuf:"bytes,1,opt,name=encryptedKey,proto3" json:"encryptedKey,omitempty"`
	KeyCrypType  string `protobuf:"bytes,2,opt,name=keyCrypType,proto3" json:"keyCrypType,omitempty"`
	DataCrypType string `protobuf:"bytes,3,opt,name=dataCrypType,proto3" json:"dataCrypType,omitempty"`
}

func (m *CipherInfo) Reset()         { *m = CipherInfo{} }
func (m *CipherInfo) String() string { return proto.CompactTextString(m) }
func (*CipherInfo) ProtoMessage()    {}
func (*CipherInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{4}
}
func (m *CipherInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CipherInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CipherInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CipherInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipherInfo.Merge(m, src)
}
func (m *CipherInfo) XXX_Size() int {
	return m.Size()
}
func (m *CipherInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CipherInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CipherInfo proto.InternalMessageInfo

func (m *CipherInfo) GetEncryptedKey() string {
	if m != nil {
		return m.EncryptedKey
	}
	return ""
}

func (m *CipherInfo) GetKeyCrypType() string {
	if m != nil {
		return m.KeyCrypType
	}
	return ""
}

func (m *CipherInfo) GetDataCrypType() string {
	if m != nil {
		return m.DataCrypType
	}
	return ""
}

type SCCallInfo struct {
	ScCallSN      string         `protobuf:"bytes,1,opt,name=scCallSN,proto3" json:"scCallSN,omitempty"`
	DestSCAddress string         `protobuf:"bytes,2,opt,name=destSCAddress,proto3" json:"destSCAddress,omitempty"`
	DestLocation  []*ConfigInfo  `protobuf:"bytes,3,rep,name=destLocation,proto3" json:"destLocation,omitempty"`
	ScMethod      string         `protobuf:"bytes,4,opt,name=scMethod,proto3" json:"scMethod,omitempty"`
	Param         []*SCCallParam `protobuf:"bytes,5,rep,name=param,proto3" json:"param,omitempty"`
}

func (m *SCCallInfo) Reset()         { *m = SCCallInfo{} }
func (m *SCCallInfo) String() string { return proto.CompactTextString(m) }
func (*SCCallInfo) ProtoMessage()    {}
func (*SCCallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{5}
}
func (m *SCCallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCCallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCCallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCCallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCCallInfo.Merge(m, src)
}
func (m *SCCallInfo) XXX_Size() int {
	return m.Size()
}
func (m *SCCallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SCCallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SCCallInfo proto.InternalMessageInfo

func (m *SCCallInfo) GetScCallSN() string {
	if m != nil {
		return m.ScCallSN
	}
	return ""
}

func (m *SCCallInfo) GetDestSCAddress() string {
	if m != nil {
		return m.DestSCAddress
	}
	return ""
}

func (m *SCCallInfo) GetDestLocation() []*ConfigInfo {
	if m != nil {
		return m.DestLocation
	}
	return nil
}

func (m *SCCallInfo) GetScMethod() string {
	if m != nil {
		return m.ScMethod
	}
	return ""
}

func (m *SCCallInfo) GetParam() []*SCCallParam {
	if m != nil {
		return m.Param
	}
	return nil
}

type SCCallParam struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SCCallParam) Reset()         { *m = SCCallParam{} }
func (m *SCCallParam) String() string { return proto.CompactTextString(m) }
func (*SCCallParam) ProtoMessage()    {}
func (*SCCallParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{6}
}
func (m *SCCallParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCCallParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCCallParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCCallParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCCallParam.Merge(m, src)
}
func (m *SCCallParam) XXX_Size() int {
	return m.Size()
}
func (m *SCCallParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SCCallParam.DiscardUnknown(m)
}

var xxx_messageInfo_SCCallParam proto.InternalMessageInfo

func (m *SCCallParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SCCallParam) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SCCallParam) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// -------------------------------------------目标链need------------------------------------
type ArrivalNoticeInfo struct {
	ReqTs       int64               `protobuf:"varint,1,opt,name=reqTs,proto3" json:"reqTs,omitempty"`
	ReqTxHash   string              `protobuf:"bytes,2,opt,name=reqTxHash,proto3" json:"reqTxHash,omitempty"`
	DataDestRef []*CrossDataDestRef `protobuf:"bytes,3,rep,name=dataDestRef,proto3" json:"dataDestRef,omitempty"`
	CrsGW       []*CrsGWLinkInfo    `protobuf:"bytes,4,rep,name=crsGW,proto3" json:"crsGW,omitempty"`
}

func (m *ArrivalNoticeInfo) Reset()         { *m = ArrivalNoticeInfo{} }
func (m *ArrivalNoticeInfo) String() string { return proto.CompactTextString(m) }
func (*ArrivalNoticeInfo) ProtoMessage()    {}
func (*ArrivalNoticeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{7}
}
func (m *ArrivalNoticeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArrivalNoticeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArrivalNoticeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArrivalNoticeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrivalNoticeInfo.Merge(m, src)
}
func (m *ArrivalNoticeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArrivalNoticeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrivalNoticeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArrivalNoticeInfo proto.InternalMessageInfo

func (m *ArrivalNoticeInfo) GetReqTs() int64 {
	if m != nil {
		return m.ReqTs
	}
	return 0
}

func (m *ArrivalNoticeInfo) GetReqTxHash() string {
	if m != nil {
		return m.ReqTxHash
	}
	return ""
}

func (m *ArrivalNoticeInfo) GetDataDestRef() []*CrossDataDestRef {
	if m != nil {
		return m.DataDestRef
	}
	return nil
}

func (m *ArrivalNoticeInfo) GetCrsGW() []*CrsGWLinkInfo {
	if m != nil {
		return m.CrsGW
	}
	return nil
}

type CrsGWLinkInfo struct {
	SeqNo int32 `protobuf:"varint,1,opt,name=seqNo,proto3" json:"seqNo,omitempty"`
	// ibtp.Index
	GwID string `protobuf:"bytes,2,opt,name=gwID,proto3" json:"gwID,omitempty"`
	// ibtp.To or From
	StartTs    int64 `protobuf:"varint,3,opt,name=startTs,proto3" json:"startTs,omitempty"`
	EndTs      int64 `protobuf:"varint,4,opt,name=endTs,proto3" json:"endTs,omitempty"`
	EndRecvTs  int64 `protobuf:"varint,5,opt,name=endRecvTs,proto3" json:"endRecvTs,omitempty"`
	StartFwdTs int64 `protobuf:"varint,6,opt,name=startFwdTs,proto3" json:"startFwdTs,omitempty"`
}

func (m *CrsGWLinkInfo) Reset()         { *m = CrsGWLinkInfo{} }
func (m *CrsGWLinkInfo) String() string { return proto.CompactTextString(m) }
func (*CrsGWLinkInfo) ProtoMessage()    {}
func (*CrsGWLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{8}
}
func (m *CrsGWLinkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrsGWLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrsGWLinkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrsGWLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrsGWLinkInfo.Merge(m, src)
}
func (m *CrsGWLinkInfo) XXX_Size() int {
	return m.Size()
}
func (m *CrsGWLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CrsGWLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CrsGWLinkInfo proto.InternalMessageInfo

func (m *CrsGWLinkInfo) GetSeqNo() int32 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *CrsGWLinkInfo) GetGwID() string {
	if m != nil {
		return m.GwID
	}
	return ""
}

func (m *CrsGWLinkInfo) GetStartTs() int64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *CrsGWLinkInfo) GetEndTs() int64 {
	if m != nil {
		return m.EndTs
	}
	return 0
}

func (m *CrsGWLinkInfo) GetEndRecvTs() int64 {
	if m != nil {
		return m.EndRecvTs
	}
	return 0
}

func (m *CrsGWLinkInfo) GetStartFwdTs() int64 {
	if m != nil {
		return m.StartFwdTs
	}
	return 0
}

// -------------------------------------------来源链回执need------------------------------------
// resq时请求的字段
type ResInfo struct {
	ResponseInfo *ResponseInfo `protobuf:"bytes,1,opt,name=responseInfo,proto3" json:"responseInfo,omitempty"`
	ResultInfo   *ResultInfo   `protobuf:"bytes,2,opt,name=resultInfo,proto3" json:"resultInfo,omitempty"`
}

func (m *ResInfo) Reset()         { *m = ResInfo{} }
func (m *ResInfo) String() string { return proto.CompactTextString(m) }
func (*ResInfo) ProtoMessage()    {}
func (*ResInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{9}
}
func (m *ResInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResInfo.Merge(m, src)
}
func (m *ResInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResInfo proto.InternalMessageInfo

func (m *ResInfo) GetResponseInfo() *ResponseInfo {
	if m != nil {
		return m.ResponseInfo
	}
	return nil
}

func (m *ResInfo) GetResultInfo() *ResultInfo {
	if m != nil {
		return m.ResultInfo
	}
	return nil
}

type ResponseInfo struct {
	RetCode int32 `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	// todo 能进入业务合约执行说明已经是1，-1的情况无法触达
	RetErrMsg string `protobuf:"bytes,2,opt,name=retErrMsg,proto3" json:"retErrMsg,omitempty"`
	// todo 目的链执行失败信息，同样失败时无法触达
	ArrNoticeTs  int64  `protobuf:"varint,3,opt,name=arrNoticeTs,proto3" json:"arrNoticeTs,omitempty"`
	ArrNtcTxHash string `protobuf:"bytes,4,opt,name=arrNtcTxHash,proto3" json:"arrNtcTxHash,omitempty"`
	// todo 以上两个信息由目的链插件gengraCallback生成
	CrsGW []*CrsGWLinkInfo `protobuf:"bytes,5,rep,name=crsGW,proto3" json:"crsGW,omitempty"`
}

func (m *ResponseInfo) Reset()         { *m = ResponseInfo{} }
func (m *ResponseInfo) String() string { return proto.CompactTextString(m) }
func (*ResponseInfo) ProtoMessage()    {}
func (*ResponseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{10}
}
func (m *ResponseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseInfo.Merge(m, src)
}
func (m *ResponseInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResponseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseInfo proto.InternalMessageInfo

func (m *ResponseInfo) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *ResponseInfo) GetRetErrMsg() string {
	if m != nil {
		return m.RetErrMsg
	}
	return ""
}

func (m *ResponseInfo) GetArrNoticeTs() int64 {
	if m != nil {
		return m.ArrNoticeTs
	}
	return 0
}

func (m *ResponseInfo) GetArrNtcTxHash() string {
	if m != nil {
		return m.ArrNtcTxHash
	}
	return ""
}

func (m *ResponseInfo) GetCrsGW() []*CrsGWLinkInfo {
	if m != nil {
		return m.CrsGW
	}
	return nil
}

type ResultInfo struct {
	DataResult []*DataSaveResult `protobuf:"bytes,1,rep,name=dataResult,proto3" json:"dataResult,omitempty"`
	ScResult   []*SCCallResult   `protobuf:"bytes,2,rep,name=scResult,proto3" json:"scResult,omitempty"`
}

func (m *ResultInfo) Reset()         { *m = ResultInfo{} }
func (m *ResultInfo) String() string { return proto.CompactTextString(m) }
func (*ResultInfo) ProtoMessage()    {}
func (*ResultInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{11}
}
func (m *ResultInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultInfo.Merge(m, src)
}
func (m *ResultInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResultInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResultInfo proto.InternalMessageInfo

func (m *ResultInfo) GetDataResult() []*DataSaveResult {
	if m != nil {
		return m.DataResult
	}
	return nil
}

func (m *ResultInfo) GetScResult() []*SCCallResult {
	if m != nil {
		return m.ScResult
	}
	return nil
}

type DataSaveResult struct {
	CrsDataSN string `protobuf:"bytes,1,opt,name=crsDataSN,proto3" json:"crsDataSN,omitempty"`
	RetCode   int32  `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetErrMsg string `protobuf:"bytes,3,opt,name=retErrMsg,proto3" json:"retErrMsg,omitempty"`
}

func (m *DataSaveResult) Reset()         { *m = DataSaveResult{} }
func (m *DataSaveResult) String() string { return proto.CompactTextString(m) }
func (*DataSaveResult) ProtoMessage()    {}
func (*DataSaveResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{12}
}
func (m *DataSaveResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSaveResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSaveResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSaveResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSaveResult.Merge(m, src)
}
func (m *DataSaveResult) XXX_Size() int {
	return m.Size()
}
func (m *DataSaveResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSaveResult.DiscardUnknown(m)
}

var xxx_messageInfo_DataSaveResult proto.InternalMessageInfo

func (m *DataSaveResult) GetCrsDataSN() string {
	if m != nil {
		return m.CrsDataSN
	}
	return ""
}

func (m *DataSaveResult) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DataSaveResult) GetRetErrMsg() string {
	if m != nil {
		return m.RetErrMsg
	}
	return ""
}

type SCCallResult struct {
	ScCallSN      string `protobuf:"bytes,1,opt,name=scCallSN,proto3" json:"scCallSN,omitempty"`
	RetCode       int32  `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetErrMsg     string `protobuf:"bytes,3,opt,name=retErrMsg,proto3" json:"retErrMsg,omitempty"`
	CrsCallResult string `protobuf:"bytes,4,opt,name=crsCallResult,proto3" json:"crsCallResult,omitempty"`
}

func (m *SCCallResult) Reset()         { *m = SCCallResult{} }
func (m *SCCallResult) String() string { return proto.CompactTextString(m) }
func (*SCCallResult) ProtoMessage()    {}
func (*SCCallResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{13}
}
func (m *SCCallResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCCallResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCCallResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCCallResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCCallResult.Merge(m, src)
}
func (m *SCCallResult) XXX_Size() int {
	return m.Size()
}
func (m *SCCallResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SCCallResult.DiscardUnknown(m)
}

var xxx_messageInfo_SCCallResult proto.InternalMessageInfo

func (m *SCCallResult) GetScCallSN() string {
	if m != nil {
		return m.ScCallSN
	}
	return ""
}

func (m *SCCallResult) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *SCCallResult) GetRetErrMsg() string {
	if m != nil {
		return m.RetErrMsg
	}
	return ""
}

func (m *SCCallResult) GetCrsCallResult() string {
	if m != nil {
		return m.CrsCallResult
	}
	return ""
}

type CrossDataDestRef struct {
	CrsDataSN    string        `protobuf:"bytes,1,opt,name=crsDataSN,proto3" json:"crsDataSN,omitempty"`
	DestDataID   string        `protobuf:"bytes,2,opt,name=destDataID,proto3" json:"destDataID,omitempty"`
	DestLocation []*ConfigInfo `protobuf:"bytes,3,rep,name=destLocation,proto3" json:"destLocation,omitempty"`
}

func (m *CrossDataDestRef) Reset()         { *m = CrossDataDestRef{} }
func (m *CrossDataDestRef) String() string { return proto.CompactTextString(m) }
func (*CrossDataDestRef) ProtoMessage()    {}
func (*CrossDataDestRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{14}
}
func (m *CrossDataDestRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossDataDestRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossDataDestRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossDataDestRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossDataDestRef.Merge(m, src)
}
func (m *CrossDataDestRef) XXX_Size() int {
	return m.Size()
}
func (m *CrossDataDestRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossDataDestRef.DiscardUnknown(m)
}

var xxx_messageInfo_CrossDataDestRef proto.InternalMessageInfo

func (m *CrossDataDestRef) GetCrsDataSN() string {
	if m != nil {
		return m.CrsDataSN
	}
	return ""
}

func (m *CrossDataDestRef) GetDestDataID() string {
	if m != nil {
		return m.DestDataID
	}
	return ""
}

func (m *CrossDataDestRef) GetDestLocation() []*ConfigInfo {
	if m != nil {
		return m.DestLocation
	}
	return nil
}

type ConfigInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ConfigInfo) Reset()         { *m = ConfigInfo{} }
func (m *ConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ConfigInfo) ProtoMessage()    {}
func (*ConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{15}
}
func (m *ConfigInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfo.Merge(m, src)
}
func (m *ConfigInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfo proto.InternalMessageInfo

func (m *ConfigInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CrossChainTxCfg struct {
	Unicode          string          `protobuf:"bytes,1,opt,name=unicode,proto3" json:"unicode,omitempty"`
	CrsChnTxType     string          `protobuf:"bytes,2,opt,name=crsChnTxType,proto3" json:"crsChnTxType,omitempty"`
	OpenLicense      int32           `protobuf:"varint,3,opt,name=openLicense,proto3" json:"openLicense,omitempty"`
	SrcChainID       string          `protobuf:"bytes,4,opt,name=srcChainID,proto3" json:"srcChainID,omitempty"`
	DestChainID      string          `protobuf:"bytes,5,opt,name=destChainID,proto3" json:"destChainID,omitempty"`
	SendSystemID     string          `protobuf:"bytes,6,opt,name=sendSystemID,proto3" json:"sendSystemID,omitempty"`
	RecvSystemID     string          `protobuf:"bytes,7,opt,name=recvSystemID,proto3" json:"recvSystemID,omitempty"`
	DestDataSaveRule *SaveRuleConfig `protobuf:"bytes,8,opt,name=destDataSaveRule,proto3" json:"destDataSaveRule,omitempty"`
	RunState         int32           `protobuf:"varint,9,opt,name=runState,proto3" json:"runState,omitempty"`
}

func (m *CrossChainTxCfg) Reset()         { *m = CrossChainTxCfg{} }
func (m *CrossChainTxCfg) String() string { return proto.CompactTextString(m) }
func (*CrossChainTxCfg) ProtoMessage()    {}
func (*CrossChainTxCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{16}
}
func (m *CrossChainTxCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTxCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTxCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTxCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTxCfg.Merge(m, src)
}
func (m *CrossChainTxCfg) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTxCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTxCfg.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTxCfg proto.InternalMessageInfo

func (m *CrossChainTxCfg) GetUnicode() string {
	if m != nil {
		return m.Unicode
	}
	return ""
}

func (m *CrossChainTxCfg) GetCrsChnTxType() string {
	if m != nil {
		return m.CrsChnTxType
	}
	return ""
}

func (m *CrossChainTxCfg) GetOpenLicense() int32 {
	if m != nil {
		return m.OpenLicense
	}
	return 0
}

func (m *CrossChainTxCfg) GetSrcChainID() string {
	if m != nil {
		return m.SrcChainID
	}
	return ""
}

func (m *CrossChainTxCfg) GetDestChainID() string {
	if m != nil {
		return m.DestChainID
	}
	return ""
}

func (m *CrossChainTxCfg) GetSendSystemID() string {
	if m != nil {
		return m.SendSystemID
	}
	return ""
}

func (m *CrossChainTxCfg) GetRecvSystemID() string {
	if m != nil {
		return m.RecvSystemID
	}
	return ""
}

func (m *CrossChainTxCfg) GetDestDataSaveRule() *SaveRuleConfig {
	if m != nil {
		return m.DestDataSaveRule
	}
	return nil
}

func (m *CrossChainTxCfg) GetRunState() int32 {
	if m != nil {
		return m.RunState
	}
	return 0
}

type SaveRuleConfig struct {
	Location []*ConfigInfo    `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	Right    []*DataRightInfo `protobuf:"bytes,2,rep,name=right,proto3" json:"right,omitempty"`
}

func (m *SaveRuleConfig) Reset()         { *m = SaveRuleConfig{} }
func (m *SaveRuleConfig) String() string { return proto.CompactTextString(m) }
func (*SaveRuleConfig) ProtoMessage()    {}
func (*SaveRuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{17}
}
func (m *SaveRuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveRuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveRuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveRuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRuleConfig.Merge(m, src)
}
func (m *SaveRuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *SaveRuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRuleConfig proto.InternalMessageInfo

func (m *SaveRuleConfig) GetLocation() []*ConfigInfo {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *SaveRuleConfig) GetRight() []*DataRightInfo {
	if m != nil {
		return m.Right
	}
	return nil
}

type DataRightInfo struct {
	RightName string   `protobuf:"bytes,1,opt,name=rightName,proto3" json:"rightName,omitempty"`
	Ids       []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *DataRightInfo) Reset()         { *m = DataRightInfo{} }
func (m *DataRightInfo) String() string { return proto.CompactTextString(m) }
func (*DataRightInfo) ProtoMessage()    {}
func (*DataRightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b7f1bd9968480ef, []int{18}
}
func (m *DataRightInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataRightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataRightInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataRightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRightInfo.Merge(m, src)
}
func (m *DataRightInfo) XXX_Size() int {
	return m.Size()
}
func (m *DataRightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DataRightInfo proto.InternalMessageInfo

func (m *DataRightInfo) GetRightName() string {
	if m != nil {
		return m.RightName
	}
	return ""
}

func (m *DataRightInfo) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDataResponseResult)(nil), "pb.GetDataResponseResult")
	proto.RegisterType((*GetDataResponseResult_ResponseDataInfo)(nil), "pb.GetDataResponseResult.ResponseDataInfo")
	proto.RegisterType((*ReqFJS)(nil), "pb.ReqFJS")
	proto.RegisterType((*RequestInfo)(nil), "pb.RequestInfo")
	proto.RegisterType((*DataInfo)(nil), "pb.DataInfo")
	proto.RegisterType((*CipherInfo)(nil), "pb.CipherInfo")
	proto.RegisterType((*SCCallInfo)(nil), "pb.SCCallInfo")
	proto.RegisterType((*SCCallParam)(nil), "pb.SCCallParam")
	proto.RegisterType((*ArrivalNoticeInfo)(nil), "pb.ArrivalNoticeInfo")
	proto.RegisterType((*CrsGWLinkInfo)(nil), "pb.CrsGWLinkInfo")
	proto.RegisterType((*ResInfo)(nil), "pb.ResInfo")
	proto.RegisterType((*ResponseInfo)(nil), "pb.ResponseInfo")
	proto.RegisterType((*ResultInfo)(nil), "pb.ResultInfo")
	proto.RegisterType((*DataSaveResult)(nil), "pb.DataSaveResult")
	proto.RegisterType((*SCCallResult)(nil), "pb.SCCallResult")
	proto.RegisterType((*CrossDataDestRef)(nil), "pb.CrossDataDestRef")
	proto.RegisterType((*ConfigInfo)(nil), "pb.ConfigInfo")
	proto.RegisterType((*CrossChainTxCfg)(nil), "pb.CrossChainTxCfg")
	proto.RegisterType((*SaveRuleConfig)(nil), "pb.SaveRuleConfig")
	proto.RegisterType((*DataRightInfo)(nil), "pb.DataRightInfo")
}

func init() { proto.RegisterFile("keti3.proto", fileDescriptor_0b7f1bd9968480ef) }

var fileDescriptor_0b7f1bd9968480ef = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xef, 0xda, 0x75, 0x62, 0x3f, 0xbb, 0xa9, 0x33, 0x6a, 0xbf, 0xb2, 0xa2, 0xca, 0xb2, 0x56,
	0x5f, 0xc0, 0x54, 0x28, 0x42, 0x29, 0xea, 0x11, 0xd4, 0xda, 0x24, 0xa4, 0x4d, 0xa3, 0x6a, 0x6c,
	0xa9, 0xe7, 0xcd, 0xee, 0x24, 0x5e, 0xd5, 0xd9, 0x75, 0x66, 0xc6, 0x4e, 0xdc, 0x33, 0x07, 0x8e,
	0xfc, 0x17, 0x70, 0xe0, 0xca, 0x8d, 0x2b, 0x12, 0xdc, 0x7a, 0x83, 0x23, 0x4a, 0xf8, 0x43, 0xd0,
	0x7b, 0x33, 0xbb, 0x3b, 0x9b, 0x44, 0x89, 0xd4, 0x9e, 0xbc, 0xef, 0xf3, 0x3e, 0xf3, 0x66, 0xde,
	0x6f, 0x43, 0xf3, 0xad, 0xd0, 0xf1, 0x93, 0xcd, 0x99, 0x4c, 0x75, 0xca, 0x2a, 0xb3, 0x03, 0xff,
	0xb7, 0x0a, 0x3c, 0xdc, 0x11, 0x7a, 0x18, 0xe8, 0x80, 0x0b, 0x35, 0x4b, 0x13, 0x25, 0xb8, 0x50,
	0xf3, 0xa9, 0x66, 0x7d, 0xa8, 0x47, 0x81, 0x0e, 0x76, 0x93, 0xc3, 0xb4, 0xe3, 0xf5, 0xaa, 0xfd,
	0xe6, 0x56, 0x6b, 0x73, 0x76, 0xb0, 0x39, 0xb4, 0x18, 0xcf, 0xb5, 0xec, 0x05, 0x40, 0x64, 0xce,
	0xcf, 0xa7, 0xba, 0x53, 0x21, 0xee, 0x63, 0xe4, 0x5e, 0x6b, 0x78, 0x33, 0x13, 0x73, 0x4b, 0xce,
	0xe9, 0x8d, 0x5f, 0x3c, 0x68, 0x5f, 0x26, 0xb0, 0x47, 0xd0, 0x08, 0xa5, 0x42, 0x71, 0xb4, 0xdf,
	0xf1, 0x7a, 0x5e, 0xbf, 0xc1, 0x0b, 0x80, 0x31, 0xb8, 0xab, 0x97, 0x33, 0xd1, 0xa9, 0x90, 0x82,
	0xbe, 0x11, 0x3b, 0x48, 0xa3, 0x65, 0xa7, 0xda, 0xf3, 0xfa, 0x2d, 0x4e, 0xdf, 0x6c, 0x03, 0xea,
	0xf8, 0xbb, 0x1f, 0x1c, 0x8b, 0xce, 0x5d, 0xe2, 0xe6, 0x32, 0xfb, 0x1f, 0xac, 0x48, 0xf3, 0xfc,
	0x5a, 0xcf, 0xeb, 0xd7, 0xb9, 0x95, 0x58, 0x17, 0x20, 0x4a, 0x4f, 0x93, 0x6f, 0xa5, 0x7c, 0xa5,
	0x8e, 0x3a, 0x2b, 0x74, 0xca, 0x41, 0xfc, 0x33, 0x58, 0xe1, 0xe2, 0x64, 0xfb, 0xc5, 0x88, 0x7d,
	0x0e, 0xab, 0x52, 0x9c, 0xd8, 0x68, 0x79, 0xfd, 0xe6, 0xd6, 0x7d, 0x8c, 0x00, 0x17, 0x27, 0x73,
	0xa1, 0x34, 0xb9, 0x99, 0xe9, 0xd9, 0x00, 0xd6, 0x03, 0x29, 0xe3, 0x45, 0x30, 0xdd, 0x4f, 0x75,
	0x1c, 0x0a, 0x3a, 0x54, 0xa1, 0x43, 0x0f, 0xf1, 0xd0, 0xb3, 0xcb, 0x4a, 0x7e, 0x95, 0xef, 0xff,
	0xe9, 0x41, 0xd3, 0xb1, 0xce, 0x3a, 0xb0, 0x3a, 0x4f, 0xe2, 0x30, 0x8d, 0x84, 0x8d, 0x50, 0x26,
	0x32, 0x1f, 0x5a, 0xa1, 0x54, 0x83, 0x49, 0x32, 0x3e, 0x1b, 0x17, 0x71, 0x2a, 0x61, 0x96, 0xf3,
	0x3c, 0x7e, 0xb7, 0x3d, 0x4d, 0x4f, 0x77, 0x87, 0x14, 0x37, 0xc3, 0xc9, 0xb1, 0x52, 0x41, 0xdc,
	0xbd, 0xb1, 0x20, 0x36, 0x01, 0x54, 0x38, 0x08, 0xa6, 0x53, 0xe2, 0xd6, 0x88, 0xbb, 0x86, 0xdc,
	0xd1, 0x20, 0x43, 0xb9, 0xc3, 0xf0, 0xff, 0xf5, 0xa0, 0xfe, 0x11, 0xc9, 0x7e, 0x04, 0x0d, 0x25,
	0x43, 0x32, 0x90, 0xbd, 0xbc, 0x00, 0xd8, 0x97, 0xd0, 0x54, 0x32, 0xdc, 0x4b, 0xc3, 0x40, 0xc7,
	0x69, 0x62, 0x5f, 0x4e, 0xaf, 0x19, 0xa4, 0xc9, 0x61, 0x7c, 0x44, 0xaf, 0x71, 0x29, 0x58, 0x28,
	0xe8, 0xca, 0x77, 0x81, 0x9a, 0x50, 0x39, 0x34, 0x78, 0x2e, 0xe3, 0xfd, 0x2a, 0x7e, 0x27, 0xa8,
	0x14, 0xaa, 0x9c, 0xbe, 0xd9, 0xa7, 0xb0, 0x12, 0xc6, 0xb3, 0x89, 0x90, 0x9d, 0x55, 0x4a, 0xa2,
	0x31, 0x4e, 0x08, 0x19, 0xb7, 0x5a, 0x7f, 0x01, 0x50, 0xa0, 0x18, 0x72, 0x91, 0x84, 0x72, 0x39,
	0xd3, 0x22, 0x7a, 0x29, 0x96, 0xd6, 0xd5, 0x12, 0xc6, 0x7a, 0xd8, 0xb0, 0xcb, 0x81, 0x5c, 0xce,
	0x9c, 0xcc, 0xb9, 0x10, 0x5a, 0xc1, 0xb7, 0xe5, 0x14, 0x9b, 0x38, 0x17, 0xf3, 0x7f, 0xf7, 0x00,
	0x8a, 0xc8, 0xa3, 0x7b, 0x26, 0xf6, 0x79, 0x7c, 0x73, 0x99, 0xfd, 0x1f, 0xee, 0x45, 0x42, 0xe9,
	0xd1, 0xe0, 0x59, 0x14, 0x49, 0xa1, 0x94, 0xbd, 0xb2, 0x0c, 0xb2, 0x2d, 0x68, 0x21, 0x90, 0xc7,
	0xb4, 0x7a, 0x6d, 0x4c, 0x4b, 0x1c, 0x73, 0xeb, 0x2b, 0xa1, 0x27, 0x69, 0x94, 0x75, 0x5f, 0x26,
	0xb3, 0x4f, 0xa0, 0x36, 0x0b, 0x64, 0x70, 0x6c, 0x4b, 0xe5, 0x7e, 0x51, 0x2a, 0xaf, 0x11, 0xe6,
	0x46, 0xeb, 0xbf, 0x84, 0xa6, 0x83, 0x62, 0x2a, 0x12, 0xec, 0x65, 0xe3, 0x03, 0x7d, 0x5f, 0x5b,
	0x1e, 0x0f, 0xa0, 0xb6, 0x08, 0xa6, 0x73, 0x61, 0x87, 0x81, 0x11, 0xfc, 0x9f, 0x3d, 0x58, 0xbf,
	0xd2, 0x68, 0xc8, 0x95, 0xe2, 0x64, 0xac, 0xc8, 0x68, 0x95, 0x1b, 0x01, 0x0b, 0x0c, 0x3f, 0xce,
	0xa8, 0x22, 0x8c, 0xe9, 0x02, 0x60, 0x4f, 0xa1, 0x89, 0xe1, 0x1e, 0x0a, 0xa5, 0xb9, 0x38, 0xb4,
	0xc1, 0x78, 0x40, 0xc1, 0x90, 0xa9, 0xa2, 0xc2, 0xb5, 0x3a, 0xee, 0x12, 0xd9, 0x67, 0x50, 0x0b,
	0xa5, 0xda, 0x79, 0x63, 0x4b, 0x72, 0xdd, 0x9c, 0x50, 0x3b, 0x6f, 0xf6, 0xe2, 0xe4, 0x2d, 0x45,
	0xd0, 0xe8, 0xfd, 0x9f, 0x3c, 0xb8, 0x57, 0x52, 0xe0, 0x33, 0x95, 0x38, 0xd9, 0x37, 0xa3, 0xa6,
	0xc6, 0x8d, 0x80, 0xce, 0x1f, 0x61, 0xf3, 0x5a, 0xe7, 0xf1, 0x1b, 0xc7, 0x82, 0xd2, 0x81, 0xd4,
	0x63, 0x45, 0xee, 0x57, 0x79, 0x26, 0xa2, 0x0d, 0x91, 0x44, 0x63, 0x45, 0xd9, 0xa8, 0x72, 0x23,
	0xa0, 0xab, 0x22, 0x89, 0xb8, 0x08, 0x17, 0x63, 0x45, 0xc5, 0x5f, 0xe5, 0x05, 0x80, 0xe3, 0x90,
	0x8e, 0x6f, 0x9f, 0xe2, 0x41, 0xd3, 0x03, 0x0e, 0xe2, 0xa7, 0xb0, 0xca, 0x85, 0xa2, 0x27, 0x7e,
	0x05, 0x2d, 0x69, 0xe7, 0xb8, 0x33, 0x14, 0xdb, 0x66, 0x28, 0x16, 0x38, 0x2f, 0xb1, 0x70, 0x72,
	0x98, 0xc9, 0xeb, 0xcc, 0xc4, 0x35, 0x7b, 0xc6, 0xa2, 0xdc, 0x61, 0xf8, 0xbf, 0x7a, 0xd0, 0x72,
	0xcd, 0xa1, 0xbf, 0x52, 0xe8, 0x41, 0x36, 0x06, 0x6b, 0x3c, 0x13, 0x4d, 0x12, 0xb5, 0x9d, 0xe4,
	0x79, 0x12, 0x2d, 0x80, 0x9d, 0x16, 0x48, 0x69, 0x2a, 0x21, 0x8f, 0x95, 0x0b, 0x61, 0xa7, 0xa1,
	0xa8, 0x43, 0x5b, 0x07, 0xa6, 0x88, 0x4b, 0x58, 0x91, 0xd2, 0xda, 0x2d, 0x29, 0x4d, 0x00, 0x0a,
	0x8f, 0xd8, 0x56, 0x69, 0x81, 0x9a, 0x65, 0xcb, 0xb2, 0xd9, 0x3a, 0x0a, 0x16, 0x76, 0x73, 0xba,
	0x8b, 0x92, 0x7d, 0x81, 0xfd, 0x54, 0x5a, 0xb9, 0xed, 0xa2, 0x6d, 0x2c, 0x3f, 0x67, 0xf8, 0x87,
	0xb0, 0x56, 0xb6, 0x75, 0xcb, 0x98, 0x75, 0xc2, 0x58, 0xb9, 0x21, 0x8c, 0xd5, 0x4b, 0x61, 0xf4,
	0x7f, 0xf0, 0xa0, 0xe5, 0x3e, 0xe1, 0xc6, 0x61, 0xf3, 0x81, 0x97, 0xe0, 0x90, 0xc2, 0xe5, 0x95,
	0x5f, 0x62, 0x53, 0x51, 0x06, 0xfd, 0xef, 0x3d, 0x68, 0x5f, 0x6e, 0xc0, 0x5b, 0xbc, 0xc6, 0x6d,
	0x2f, 0x94, 0xb6, 0x9b, 0xa4, 0x62, 0xb7, 0x7d, 0x8e, 0x7c, 0xc8, 0xdc, 0xf3, 0x9f, 0x02, 0x14,
	0xba, 0x6b, 0x67, 0x56, 0x3e, 0x9f, 0xcc, 0x85, 0x76, 0x3e, 0xfd, 0x55, 0x81, 0xfb, 0xf4, 0xfc,
	0xc1, 0x24, 0x88, 0x93, 0xf1, 0xd9, 0xe0, 0xf0, 0xe8, 0x23, 0x77, 0x7c, 0x0f, 0x9a, 0xe9, 0x4c,
	0x24, 0x7b, 0x71, 0x28, 0x12, 0x65, 0xa6, 0x61, 0x8d, 0xbb, 0x10, 0xb5, 0xb7, 0x0c, 0xe9, 0xc2,
	0xdd, 0xa1, 0x8d, 0xaa, 0x83, 0xa0, 0x05, 0xf4, 0x2d, 0x23, 0x98, 0xdd, 0xe8, 0x42, 0xf8, 0x0e,
	0x25, 0x92, 0x68, 0xb4, 0x54, 0x5a, 0x1c, 0xef, 0x0e, 0xed, 0x3f, 0xa6, 0x12, 0x86, 0x1c, 0x29,
	0xc2, 0x45, 0xce, 0x59, 0x35, 0x1c, 0x17, 0x63, 0x5f, 0x43, 0x3b, 0x8b, 0x3b, 0xd5, 0xec, 0x7c,
	0x2a, 0x3a, 0x75, 0x9a, 0x06, 0xd4, 0x17, 0x19, 0x66, 0x22, 0xcb, 0xaf, 0x70, 0xb1, 0xec, 0xe4,
	0x3c, 0x19, 0xe9, 0x40, 0x8b, 0x4e, 0x83, 0x1c, 0xcd, 0x65, 0x5f, 0xc0, 0x5a, 0xf9, 0x3c, 0x7b,
	0x0c, 0xf5, 0x69, 0x96, 0x53, 0xef, 0xda, 0x9c, 0xe6, 0x7a, 0x6c, 0x71, 0x19, 0x1f, 0x4d, 0xb2,
	0xa6, 0x5b, 0xcf, 0xda, 0x94, 0x23, 0x68, 0x5a, 0x9c, 0xf4, 0xfe, 0x37, 0x70, 0xaf, 0x84, 0x53,
	0x51, 0xa3, 0xb0, 0x5f, 0x14, 0x40, 0x01, 0xb0, 0x36, 0x54, 0xe3, 0x48, 0x91, 0xd5, 0x06, 0xc7,
	0xcf, 0xe7, 0x1b, 0x7f, 0x9c, 0x77, 0xbd, 0xf7, 0xe7, 0x5d, 0xef, 0x9f, 0xf3, 0xae, 0xf7, 0xe3,
	0x45, 0xf7, 0xce, 0xfb, 0x8b, 0xee, 0x9d, 0xbf, 0x2f, 0xba, 0x77, 0x5e, 0x7b, 0x07, 0x2b, 0xf4,
	0x0f, 0xfe, 0xc9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0xc4, 0x0d, 0x05, 0xd0, 0x0b, 0x00,
	0x00,
}

func (m *GetDataResponseResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataResponseResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataResponseResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataResult) > 0 {
		for iNdEx := len(m.DataResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DataInfo) > 0 {
		for iNdEx := len(m.DataInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDataResponseResult_ResponseDataInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataResponseResult_ResponseDataInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataResponseResult_ResponseDataInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DownErrMsg) > 0 {
		i -= len(m.DownErrMsg)
		copy(dAtA[i:], m.DownErrMsg)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.DownErrMsg)))
		i--
		dAtA[i] = 0x32
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.BodyName) > 0 {
		i -= len(m.BodyName)
		copy(dAtA[i:], m.BodyName)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.BodyName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrsDataSN) > 0 {
		i -= len(m.CrsDataSN)
		copy(dAtA[i:], m.CrsDataSN)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsDataSN)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqFJS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqFJS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqFJS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ArrivalNoticeInfo != nil {
		{
			size, err := m.ArrivalNoticeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeti3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ReqInfo != nil {
		{
			size, err := m.ReqInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeti3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScCallInfo) > 0 {
		for iNdEx := len(m.ScCallInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScCallInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DataInfo) > 0 {
		for iNdEx := len(m.DataInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CrsBizFlowID) > 0 {
		i -= len(m.CrsBizFlowID)
		copy(dAtA[i:], m.CrsBizFlowID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsBizFlowID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrsChnTxType) > 0 {
		i -= len(m.CrsChnTxType)
		copy(dAtA[i:], m.CrsChnTxType)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsChnTxType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Unicode) > 0 {
		i -= len(m.Unicode)
		copy(dAtA[i:], m.Unicode)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Unicode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cipher != nil {
		{
			size, err := m.Cipher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeti3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Size_ != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcLocation) > 0 {
		for iNdEx := len(m.SrcLocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SrcLocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SrcDataID) > 0 {
		i -= len(m.SrcDataID)
		copy(dAtA[i:], m.SrcDataID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.SrcDataID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrsDataSN) > 0 {
		i -= len(m.CrsDataSN)
		copy(dAtA[i:], m.CrsDataSN)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsDataSN)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CipherInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CipherInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CipherInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataCrypType) > 0 {
		i -= len(m.DataCrypType)
		copy(dAtA[i:], m.DataCrypType)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.DataCrypType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyCrypType) > 0 {
		i -= len(m.KeyCrypType)
		copy(dAtA[i:], m.KeyCrypType)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.KeyCrypType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedKey) > 0 {
		i -= len(m.EncryptedKey)
		copy(dAtA[i:], m.EncryptedKey)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.EncryptedKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SCCallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCCallInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCCallInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Param) > 0 {
		for iNdEx := len(m.Param) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Param[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ScMethod) > 0 {
		i -= len(m.ScMethod)
		copy(dAtA[i:], m.ScMethod)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.ScMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestLocation) > 0 {
		for iNdEx := len(m.DestLocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DestLocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DestSCAddress) > 0 {
		i -= len(m.DestSCAddress)
		copy(dAtA[i:], m.DestSCAddress)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.DestSCAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScCallSN) > 0 {
		i -= len(m.ScCallSN)
		copy(dAtA[i:], m.ScCallSN)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.ScCallSN)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SCCallParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCCallParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCCallParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArrivalNoticeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArrivalNoticeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArrivalNoticeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrsGW) > 0 {
		for iNdEx := len(m.CrsGW) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrsGW[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DataDestRef) > 0 {
		for iNdEx := len(m.DataDestRef) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataDestRef[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ReqTxHash) > 0 {
		i -= len(m.ReqTxHash)
		copy(dAtA[i:], m.ReqTxHash)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.ReqTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReqTs != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.ReqTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrsGWLinkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrsGWLinkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrsGWLinkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartFwdTs != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.StartFwdTs))
		i--
		dAtA[i] = 0x30
	}
	if m.EndRecvTs != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.EndRecvTs))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTs != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.EndTs))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTs != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GwID) > 0 {
		i -= len(m.GwID)
		copy(dAtA[i:], m.GwID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.GwID)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeqNo != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.SeqNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultInfo != nil {
		{
			size, err := m.ResultInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeti3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResponseInfo != nil {
		{
			size, err := m.ResponseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeti3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrsGW) > 0 {
		for iNdEx := len(m.CrsGW) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrsGW[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ArrNtcTxHash) > 0 {
		i -= len(m.ArrNtcTxHash)
		copy(dAtA[i:], m.ArrNtcTxHash)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.ArrNtcTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ArrNoticeTs != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.ArrNoticeTs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RetErrMsg) > 0 {
		i -= len(m.RetErrMsg)
		copy(dAtA[i:], m.RetErrMsg)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.RetErrMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScResult) > 0 {
		for iNdEx := len(m.ScResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DataResult) > 0 {
		for iNdEx := len(m.DataResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataSaveResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSaveResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSaveResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RetErrMsg) > 0 {
		i -= len(m.RetErrMsg)
		copy(dAtA[i:], m.RetErrMsg)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.RetErrMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RetCode != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CrsDataSN) > 0 {
		i -= len(m.CrsDataSN)
		copy(dAtA[i:], m.CrsDataSN)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsDataSN)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SCCallResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCCallResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCCallResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrsCallResult) > 0 {
		i -= len(m.CrsCallResult)
		copy(dAtA[i:], m.CrsCallResult)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsCallResult)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RetErrMsg) > 0 {
		i -= len(m.RetErrMsg)
		copy(dAtA[i:], m.RetErrMsg)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.RetErrMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RetCode != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ScCallSN) > 0 {
		i -= len(m.ScCallSN)
		copy(dAtA[i:], m.ScCallSN)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.ScCallSN)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossDataDestRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossDataDestRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossDataDestRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestLocation) > 0 {
		for iNdEx := len(m.DestLocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DestLocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DestDataID) > 0 {
		i -= len(m.DestDataID)
		copy(dAtA[i:], m.DestDataID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.DestDataID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrsDataSN) > 0 {
		i -= len(m.CrsDataSN)
		copy(dAtA[i:], m.CrsDataSN)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsDataSN)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTxCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTxCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTxCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RunState != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.RunState))
		i--
		dAtA[i] = 0x48
	}
	if m.DestDataSaveRule != nil {
		{
			size, err := m.DestDataSaveRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeti3(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.RecvSystemID) > 0 {
		i -= len(m.RecvSystemID)
		copy(dAtA[i:], m.RecvSystemID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.RecvSystemID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SendSystemID) > 0 {
		i -= len(m.SendSystemID)
		copy(dAtA[i:], m.SendSystemID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.SendSystemID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestChainID) > 0 {
		i -= len(m.DestChainID)
		copy(dAtA[i:], m.DestChainID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.DestChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcChainID) > 0 {
		i -= len(m.SrcChainID)
		copy(dAtA[i:], m.SrcChainID)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.SrcChainID)))
		i--
		dAtA[i] = 0x22
	}
	if m.OpenLicense != 0 {
		i = encodeVarintKeti3(dAtA, i, uint64(m.OpenLicense))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CrsChnTxType) > 0 {
		i -= len(m.CrsChnTxType)
		copy(dAtA[i:], m.CrsChnTxType)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.CrsChnTxType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Unicode) > 0 {
		i -= len(m.Unicode)
		copy(dAtA[i:], m.Unicode)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.Unicode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveRuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveRuleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveRuleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Right) > 0 {
		for iNdEx := len(m.Right) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Right[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Location) > 0 {
		for iNdEx := len(m.Location) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Location[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeti3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataRightInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataRightInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataRightInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintKeti3(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RightName) > 0 {
		i -= len(m.RightName)
		copy(dAtA[i:], m.RightName)
		i = encodeVarintKeti3(dAtA, i, uint64(len(m.RightName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeti3(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeti3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDataResponseResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataInfo) > 0 {
		for _, e := range m.DataInfo {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	if len(m.DataResult) > 0 {
		for _, e := range m.DataResult {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *GetDataResponseResult_ResponseDataInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrsDataSN)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.BodyName)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.Result {
		n += 2
	}
	l = len(m.DownErrMsg)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *ReqFJS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqInfo != nil {
		l = m.ReqInfo.Size()
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.ArrivalNoticeInfo != nil {
		l = m.ArrivalNoticeInfo.Size()
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *RequestInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Unicode)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.CrsChnTxType)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.CrsBizFlowID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.DataInfo) > 0 {
		for _, e := range m.DataInfo {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	if len(m.ScCallInfo) > 0 {
		for _, e := range m.ScCallInfo {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *DataInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrsDataSN)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.SrcDataID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.SrcLocation) > 0 {
		for _, e := range m.SrcLocation {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovKeti3(uint64(m.Size_))
	}
	if m.Cipher != nil {
		l = m.Cipher.Size()
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *CipherInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedKey)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.KeyCrypType)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.DataCrypType)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *SCCallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScCallSN)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.DestSCAddress)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.DestLocation) > 0 {
		for _, e := range m.DestLocation {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	l = len(m.ScMethod)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.Param) > 0 {
		for _, e := range m.Param {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *SCCallParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *ArrivalNoticeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqTs != 0 {
		n += 1 + sovKeti3(uint64(m.ReqTs))
	}
	l = len(m.ReqTxHash)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.DataDestRef) > 0 {
		for _, e := range m.DataDestRef {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	if len(m.CrsGW) > 0 {
		for _, e := range m.CrsGW {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *CrsGWLinkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqNo != 0 {
		n += 1 + sovKeti3(uint64(m.SeqNo))
	}
	l = len(m.GwID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovKeti3(uint64(m.StartTs))
	}
	if m.EndTs != 0 {
		n += 1 + sovKeti3(uint64(m.EndTs))
	}
	if m.EndRecvTs != 0 {
		n += 1 + sovKeti3(uint64(m.EndRecvTs))
	}
	if m.StartFwdTs != 0 {
		n += 1 + sovKeti3(uint64(m.StartFwdTs))
	}
	return n
}

func (m *ResInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseInfo != nil {
		l = m.ResponseInfo.Size()
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.ResultInfo != nil {
		l = m.ResultInfo.Size()
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *ResponseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovKeti3(uint64(m.RetCode))
	}
	l = len(m.RetErrMsg)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.ArrNoticeTs != 0 {
		n += 1 + sovKeti3(uint64(m.ArrNoticeTs))
	}
	l = len(m.ArrNtcTxHash)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.CrsGW) > 0 {
		for _, e := range m.CrsGW {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *ResultInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataResult) > 0 {
		for _, e := range m.DataResult {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	if len(m.ScResult) > 0 {
		for _, e := range m.ScResult {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *DataSaveResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrsDataSN)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovKeti3(uint64(m.RetCode))
	}
	l = len(m.RetErrMsg)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *SCCallResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScCallSN)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovKeti3(uint64(m.RetCode))
	}
	l = len(m.RetErrMsg)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.CrsCallResult)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *CrossDataDestRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrsDataSN)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.DestDataID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.DestLocation) > 0 {
		for _, e := range m.DestLocation {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *ConfigInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	return n
}

func (m *CrossChainTxCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Unicode)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.CrsChnTxType)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.OpenLicense != 0 {
		n += 1 + sovKeti3(uint64(m.OpenLicense))
	}
	l = len(m.SrcChainID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.DestChainID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.SendSystemID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	l = len(m.RecvSystemID)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.DestDataSaveRule != nil {
		l = m.DestDataSaveRule.Size()
		n += 1 + l + sovKeti3(uint64(l))
	}
	if m.RunState != 0 {
		n += 1 + sovKeti3(uint64(m.RunState))
	}
	return n
}

func (m *SaveRuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Location) > 0 {
		for _, e := range m.Location {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	if len(m.Right) > 0 {
		for _, e := range m.Right {
			l = e.Size()
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func (m *DataRightInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RightName)
	if l > 0 {
		n += 1 + l + sovKeti3(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovKeti3(uint64(l))
		}
	}
	return n
}

func sovKeti3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeti3(x uint64) (n int) {
	return sovKeti3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDataResponseResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataResponseResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataResponseResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataInfo = append(m.DataInfo, &DataInfo{})
			if err := m.DataInfo[len(m.DataInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataResult = append(m.DataResult, &GetDataResponseResult_ResponseDataInfo{})
			if err := m.DataResult[len(m.DataResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataResponseResult_ResponseDataInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDataInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDataInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsDataSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsDataSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqFJS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqFJS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqFJS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqInfo == nil {
				m.ReqInfo = &RequestInfo{}
			}
			if err := m.ReqInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivalNoticeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ArrivalNoticeInfo == nil {
				m.ArrivalNoticeInfo = &ArrivalNoticeInfo{}
			}
			if err := m.ArrivalNoticeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unicode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unicode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsChnTxType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsChnTxType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsBizFlowID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsBizFlowID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataInfo = append(m.DataInfo, &DataInfo{})
			if err := m.DataInfo[len(m.DataInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScCallInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScCallInfo = append(m.ScCallInfo, &SCCallInfo{})
			if err := m.ScCallInfo[len(m.ScCallInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsDataSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsDataSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcDataID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcDataID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcLocation = append(m.SrcLocation, &ConfigInfo{})
			if err := m.SrcLocation[len(m.SrcLocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cipher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cipher == nil {
				m.Cipher = &CipherInfo{}
			}
			if err := m.Cipher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CipherInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CipherInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CipherInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCrypType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyCrypType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCrypType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCrypType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCCallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCCallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCCallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScCallSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScCallSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestSCAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestSCAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestLocation = append(m.DestLocation, &ConfigInfo{})
			if err := m.DestLocation[len(m.DestLocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = append(m.Param, &SCCallParam{})
			if err := m.Param[len(m.Param)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCCallParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCCallParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCCallParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArrivalNoticeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArrivalNoticeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArrivalNoticeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqTs", wireType)
			}
			m.ReqTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDestRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataDestRef = append(m.DataDestRef, &CrossDataDestRef{})
			if err := m.DataDestRef[len(m.DataDestRef)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsGW", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsGW = append(m.CrsGW, &CrsGWLinkInfo{})
			if err := m.CrsGW[len(m.CrsGW)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrsGWLinkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrsGWLinkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrsGWLinkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GwID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
			}
			m.EndTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndRecvTs", wireType)
			}
			m.EndRecvTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndRecvTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFwdTs", wireType)
			}
			m.StartFwdTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFwdTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseInfo == nil {
				m.ResponseInfo = &ResponseInfo{}
			}
			if err := m.ResponseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResultInfo == nil {
				m.ResultInfo = &ResultInfo{}
			}
			if err := m.ResultInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrNoticeTs", wireType)
			}
			m.ArrNoticeTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArrNoticeTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrNtcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArrNtcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsGW", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsGW = append(m.CrsGW, &CrsGWLinkInfo{})
			if err := m.CrsGW[len(m.CrsGW)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataResult = append(m.DataResult, &DataSaveResult{})
			if err := m.DataResult[len(m.DataResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScResult = append(m.ScResult, &SCCallResult{})
			if err := m.ScResult[len(m.ScResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSaveResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSaveResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSaveResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsDataSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsDataSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCCallResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCCallResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCCallResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScCallSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScCallSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsCallResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsCallResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossDataDestRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossDataDestRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossDataDestRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsDataSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsDataSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestDataID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestDataID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestLocation = append(m.DestLocation, &ConfigInfo{})
			if err := m.DestLocation[len(m.DestLocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTxCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTxCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTxCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unicode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unicode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrsChnTxType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrsChnTxType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenLicense", wireType)
			}
			m.OpenLicense = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenLicense |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendSystemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendSystemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvSystemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvSystemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestDataSaveRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestDataSaveRule == nil {
				m.DestDataSaveRule = &SaveRuleConfig{}
			}
			if err := m.DestDataSaveRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunState", wireType)
			}
			m.RunState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveRuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveRuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveRuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = append(m.Location, &ConfigInfo{})
			if err := m.Location[len(m.Location)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Right = append(m.Right, &DataRightInfo{})
			if err := m.Right[len(m.Right)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataRightInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataRightInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataRightInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeti3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeti3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeti3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeti3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeti3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeti3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeti3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeti3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeti3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeti3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeti3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeti3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeti3 = fmt.Errorf("proto: unexpected end of group")
)
