// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_meta.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_meshplus_bitxhub_kit_types "github.com/meshplus/bitxhub-kit/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterchainMeta struct {
	Counter        map[string]*Uint64Slice                      `protobuf:"bytes,1,rep,name=counter,proto3" json:"counter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	L2Roots        []github_com_meshplus_bitxhub_kit_types.Hash `protobuf:"bytes,2,rep,name=l2Roots,proto3,customtype=github.com/meshplus/bitxhub-kit/types.Hash" json:"l2Roots,omitempty"`
	TimeoutCounter map[string]*StringSlice                      `protobuf:"bytes,3,rep,name=timeoutCounter,proto3" json:"timeoutCounter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeoutL2Roots []github_com_meshplus_bitxhub_kit_types.Hash `protobuf:"bytes,4,rep,name=timeoutL2Roots,proto3,customtype=github.com/meshplus/bitxhub-kit/types.Hash" json:"timeoutL2Roots,omitempty"`
}

func (m *InterchainMeta) Reset()         { *m = InterchainMeta{} }
func (m *InterchainMeta) String() string { return proto.CompactTextString(m) }
func (*InterchainMeta) ProtoMessage()    {}
func (*InterchainMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2602fcc2fbd6b2a, []int{0}
}
func (m *InterchainMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainMeta.Merge(m, src)
}
func (m *InterchainMeta) XXX_Size() int {
	return m.Size()
}
func (m *InterchainMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainMeta.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainMeta proto.InternalMessageInfo

func (m *InterchainMeta) GetCounter() map[string]*Uint64Slice {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *InterchainMeta) GetTimeoutCounter() map[string]*StringSlice {
	if m != nil {
		return m.TimeoutCounter
	}
	return nil
}

type Uint64Slice struct {
	Slice []uint64 `protobuf:"varint,1,rep,packed,name=slice,proto3" json:"slice,omitempty"`
}

func (m *Uint64Slice) Reset()         { *m = Uint64Slice{} }
func (m *Uint64Slice) String() string { return proto.CompactTextString(m) }
func (*Uint64Slice) ProtoMessage()    {}
func (*Uint64Slice) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2602fcc2fbd6b2a, []int{1}
}
func (m *Uint64Slice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint64Slice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint64Slice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Uint64Slice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint64Slice.Merge(m, src)
}
func (m *Uint64Slice) XXX_Size() int {
	return m.Size()
}
func (m *Uint64Slice) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint64Slice.DiscardUnknown(m)
}

var xxx_messageInfo_Uint64Slice proto.InternalMessageInfo

func (m *Uint64Slice) GetSlice() []uint64 {
	if m != nil {
		return m.Slice
	}
	return nil
}

type StringSlice struct {
	Slice []string `protobuf:"bytes,1,rep,name=slice,proto3" json:"slice,omitempty"`
}

func (m *StringSlice) Reset()         { *m = StringSlice{} }
func (m *StringSlice) String() string { return proto.CompactTextString(m) }
func (*StringSlice) ProtoMessage()    {}
func (*StringSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2602fcc2fbd6b2a, []int{2}
}
func (m *StringSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringSlice.Merge(m, src)
}
func (m *StringSlice) XXX_Size() int {
	return m.Size()
}
func (m *StringSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_StringSlice.DiscardUnknown(m)
}

var xxx_messageInfo_StringSlice proto.InternalMessageInfo

func (m *StringSlice) GetSlice() []string {
	if m != nil {
		return m.Slice
	}
	return nil
}

type Interchain struct {
	ID                   string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	InterchainCounter    map[string]uint64 `protobuf:"bytes,2,rep,name=InterchainCounter,proto3" json:"InterchainCounter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReceiptCounter       map[string]uint64 `protobuf:"bytes,3,rep,name=ReceiptCounter,proto3" json:"ReceiptCounter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SourceReceiptCounter map[string]uint64 `protobuf:"bytes,4,rep,name=SourceReceiptCounter,proto3" json:"SourceReceiptCounter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Interchain) Reset()         { *m = Interchain{} }
func (m *Interchain) String() string { return proto.CompactTextString(m) }
func (*Interchain) ProtoMessage()    {}
func (*Interchain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2602fcc2fbd6b2a, []int{3}
}
func (m *Interchain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interchain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interchain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interchain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interchain.Merge(m, src)
}
func (m *Interchain) XXX_Size() int {
	return m.Size()
}
func (m *Interchain) XXX_DiscardUnknown() {
	xxx_messageInfo_Interchain.DiscardUnknown(m)
}

var xxx_messageInfo_Interchain proto.InternalMessageInfo

func (m *Interchain) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Interchain) GetInterchainCounter() map[string]uint64 {
	if m != nil {
		return m.InterchainCounter
	}
	return nil
}

func (m *Interchain) GetReceiptCounter() map[string]uint64 {
	if m != nil {
		return m.ReceiptCounter
	}
	return nil
}

func (m *Interchain) GetSourceReceiptCounter() map[string]uint64 {
	if m != nil {
		return m.SourceReceiptCounter
	}
	return nil
}

func init() {
	proto.RegisterType((*InterchainMeta)(nil), "pb.InterchainMeta")
	proto.RegisterMapType((map[string]*Uint64Slice)(nil), "pb.InterchainMeta.CounterEntry")
	proto.RegisterMapType((map[string]*StringSlice)(nil), "pb.InterchainMeta.TimeoutCounterEntry")
	proto.RegisterType((*Uint64Slice)(nil), "pb.Uint64Slice")
	proto.RegisterType((*StringSlice)(nil), "pb.StringSlice")
	proto.RegisterType((*Interchain)(nil), "pb.Interchain")
	proto.RegisterMapType((map[string]uint64)(nil), "pb.Interchain.InterchainCounterEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "pb.Interchain.ReceiptCounterEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "pb.Interchain.SourceReceiptCounterEntry")
}

func init() { proto.RegisterFile("interchain_meta.proto", fileDescriptor_d2602fcc2fbd6b2a) }

var fileDescriptor_d2602fcc2fbd6b2a = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0x76, 0x4a, 0xd5, 0x9b, 0x2a, 0xc0, 0x34, 0x20, 0x93, 0x85, 0x1b, 0x05, 0x15,
	0x59, 0x48, 0x9d, 0x48, 0x01, 0x21, 0x60, 0x47, 0x09, 0xa2, 0xe1, 0x6f, 0x31, 0x01, 0x56, 0x48,
	0xc8, 0xb6, 0x86, 0x78, 0xd4, 0xc4, 0x63, 0xd9, 0x33, 0x88, 0xbc, 0x05, 0x8f, 0xc5, 0xb2, 0x4b,
	0xc4, 0xa2, 0x42, 0xc9, 0x9a, 0x77, 0x40, 0x1e, 0xc7, 0xad, 0xed, 0x1a, 0x89, 0x74, 0x37, 0x3f,
	0xe7, 0x7e, 0xf7, 0x8c, 0xcf, 0x95, 0xe1, 0x16, 0x0f, 0x25, 0x8b, 0xfd, 0xc0, 0xe5, 0xe1, 0xe7,
	0x39, 0x93, 0x2e, 0x89, 0x62, 0x21, 0x05, 0x36, 0x22, 0xaf, 0x7b, 0x38, 0xe5, 0x32, 0x50, 0x1e,
	0xf1, 0xc5, 0x7c, 0x30, 0x15, 0x53, 0x31, 0xd0, 0x57, 0x9e, 0xfa, 0xa2, 0x77, 0x7a, 0xa3, 0x57,
	0x59, 0x49, 0xff, 0xcc, 0x84, 0xf6, 0xf8, 0x1c, 0xf6, 0x96, 0x49, 0x17, 0x3f, 0x81, 0x6d, 0x5f,
	0xa8, 0xf4, 0xcc, 0x42, 0x3d, 0xd3, 0x69, 0x0d, 0xf7, 0x49, 0xe4, 0x91, 0xb2, 0x88, 0x3c, 0xcf,
	0x14, 0x2f, 0x42, 0x19, 0x2f, 0x68, 0xae, 0xc7, 0xc7, 0xb0, 0x3d, 0x1b, 0x52, 0x21, 0x64, 0x62,
	0x19, 0x3d, 0xd3, 0xd9, 0x3d, 0x22, 0xbf, 0xce, 0xf6, 0xef, 0x17, 0x1c, 0xcd, 0x59, 0x12, 0x44,
	0x33, 0x95, 0x0c, 0x3c, 0x2e, 0xbf, 0x05, 0xca, 0x3b, 0x3c, 0xe1, 0x72, 0x20, 0x17, 0x11, 0x4b,
	0xc8, 0xb1, 0x9b, 0x04, 0x34, 0x2f, 0xc7, 0xef, 0xa0, 0x2d, 0xf9, 0x9c, 0x09, 0x25, 0xd7, 0x9d,
	0x2c, 0x53, 0x7b, 0xb9, 0x57, 0xe3, 0xe5, 0x7d, 0x49, 0x98, 0x59, 0xaa, 0x54, 0xe3, 0x8f, 0xe7,
	0xbc, 0x37, 0x6b, 0x83, 0xcd, 0x2b, 0x19, 0xac, 0x50, 0xba, 0xaf, 0x61, 0xb7, 0xd8, 0x17, 0xdf,
	0x00, 0xf3, 0x84, 0x2d, 0x2c, 0xd4, 0x43, 0xce, 0x0e, 0x4d, 0x97, 0xf8, 0x00, 0xb6, 0xbe, 0xba,
	0x33, 0xc5, 0x2c, 0xa3, 0x87, 0x9c, 0xd6, 0xf0, 0x7a, 0xfa, 0x80, 0x0f, 0x3c, 0x94, 0x8f, 0x1e,
	0x4e, 0x66, 0xdc, 0x67, 0x34, 0xbb, 0x7d, 0x6a, 0x3c, 0x46, 0x5d, 0x0a, 0x7b, 0x35, 0x6f, 0xf9,
	0x4f, 0xe6, 0x44, 0xc6, 0x3c, 0x9c, 0x56, 0x99, 0xfd, 0xbb, 0xd0, 0x2a, 0x74, 0xc3, 0x1d, 0xd8,
	0x4a, 0xd2, 0x85, 0x8e, 0xb6, 0x49, 0xb3, 0x4d, 0x2a, 0x2a, 0x94, 0x97, 0x45, 0x3b, 0xb9, 0xe8,
	0x8f, 0x09, 0x70, 0xf1, 0xe5, 0x71, 0x1b, 0x8c, 0xf1, 0x68, 0x6d, 0xca, 0x18, 0x8f, 0xf0, 0x04,
	0x6e, 0x5e, 0xdc, 0xe6, 0xa1, 0x19, 0x3a, 0xb4, 0x83, 0x72, 0x68, 0xe4, 0x92, 0x2e, 0xcb, 0xec,
	0x72, 0x3d, 0x7e, 0x05, 0x6d, 0xca, 0x7c, 0xc6, 0xa3, 0xca, 0x18, 0xf4, 0x2b, 0xc4, 0xb2, 0x68,
	0x3d, 0x02, 0xe5, 0x43, 0xfc, 0x09, 0x3a, 0x13, 0xa1, 0x62, 0x9f, 0x55, 0x88, 0x4d, 0x4d, 0x74,
	0x2a, 0xc4, 0x3a, 0x69, 0xc6, 0xad, 0xa5, 0x74, 0x47, 0x70, 0xbb, 0xfe, 0x59, 0x35, 0xf1, 0x75,
	0x8a, 0xf1, 0x35, 0x8b, 0x13, 0xf0, 0x0c, 0xf6, 0x6a, 0x5a, 0x6e, 0x84, 0x78, 0x09, 0x77, 0xfe,
	0xe9, 0x7d, 0x13, 0xd0, 0x91, 0xf5, 0x63, 0x69, 0xa3, 0xd3, 0xa5, 0x8d, 0x7e, 0x2f, 0x6d, 0xf4,
	0x7d, 0x65, 0x37, 0x4e, 0x57, 0x76, 0xe3, 0xe7, 0xca, 0x6e, 0x78, 0xd7, 0xf4, 0xbf, 0xe3, 0xc1,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xf9, 0xa9, 0x58, 0x87, 0x04, 0x00, 0x00,
}

func (m *InterchainMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeoutL2Roots) > 0 {
		for iNdEx := len(m.TimeoutL2Roots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.TimeoutL2Roots[iNdEx].Size()
				i -= size
				if _, err := m.TimeoutL2Roots[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterchainMeta(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TimeoutCounter) > 0 {
		for k := range m.TimeoutCounter {
			v := m.TimeoutCounter[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInterchainMeta(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInterchainMeta(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInterchainMeta(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.L2Roots) > 0 {
		for iNdEx := len(m.L2Roots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.L2Roots[iNdEx].Size()
				i -= size
				if _, err := m.L2Roots[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterchainMeta(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Counter) > 0 {
		for k := range m.Counter {
			v := m.Counter[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInterchainMeta(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInterchainMeta(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInterchainMeta(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Uint64Slice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint64Slice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Uint64Slice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slice) > 0 {
		dAtA4 := make([]byte, len(m.Slice)*10)
		var j3 int
		for _, num := range m.Slice {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintInterchainMeta(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringSlice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringSlice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for iNdEx := len(m.Slice) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Slice[iNdEx])
			copy(dAtA[i:], m.Slice[iNdEx])
			i = encodeVarintInterchainMeta(dAtA, i, uint64(len(m.Slice[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Interchain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interchain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interchain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceReceiptCounter) > 0 {
		for k := range m.SourceReceiptCounter {
			v := m.SourceReceiptCounter[k]
			baseI := i
			i = encodeVarintInterchainMeta(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInterchainMeta(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInterchainMeta(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReceiptCounter) > 0 {
		for k := range m.ReceiptCounter {
			v := m.ReceiptCounter[k]
			baseI := i
			i = encodeVarintInterchainMeta(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInterchainMeta(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInterchainMeta(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InterchainCounter) > 0 {
		for k := range m.InterchainCounter {
			v := m.InterchainCounter[k]
			baseI := i
			i = encodeVarintInterchainMeta(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInterchainMeta(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInterchainMeta(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintInterchainMeta(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterchainMeta(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterchainMeta(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counter) > 0 {
		for k, v := range m.Counter {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInterchainMeta(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInterchainMeta(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInterchainMeta(uint64(mapEntrySize))
		}
	}
	if len(m.L2Roots) > 0 {
		for _, e := range m.L2Roots {
			l = e.Size()
			n += 1 + l + sovInterchainMeta(uint64(l))
		}
	}
	if len(m.TimeoutCounter) > 0 {
		for k, v := range m.TimeoutCounter {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInterchainMeta(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInterchainMeta(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInterchainMeta(uint64(mapEntrySize))
		}
	}
	if len(m.TimeoutL2Roots) > 0 {
		for _, e := range m.TimeoutL2Roots {
			l = e.Size()
			n += 1 + l + sovInterchainMeta(uint64(l))
		}
	}
	return n
}

func (m *Uint64Slice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Slice) > 0 {
		l = 0
		for _, e := range m.Slice {
			l += sovInterchainMeta(uint64(e))
		}
		n += 1 + sovInterchainMeta(uint64(l)) + l
	}
	return n
}

func (m *StringSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Slice) > 0 {
		for _, s := range m.Slice {
			l = len(s)
			n += 1 + l + sovInterchainMeta(uint64(l))
		}
	}
	return n
}

func (m *Interchain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovInterchainMeta(uint64(l))
	}
	if len(m.InterchainCounter) > 0 {
		for k, v := range m.InterchainCounter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInterchainMeta(uint64(len(k))) + 1 + sovInterchainMeta(uint64(v))
			n += mapEntrySize + 1 + sovInterchainMeta(uint64(mapEntrySize))
		}
	}
	if len(m.ReceiptCounter) > 0 {
		for k, v := range m.ReceiptCounter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInterchainMeta(uint64(len(k))) + 1 + sovInterchainMeta(uint64(v))
			n += mapEntrySize + 1 + sovInterchainMeta(uint64(mapEntrySize))
		}
	}
	if len(m.SourceReceiptCounter) > 0 {
		for k, v := range m.SourceReceiptCounter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInterchainMeta(uint64(len(k))) + 1 + sovInterchainMeta(uint64(v))
			n += mapEntrySize + 1 + sovInterchainMeta(uint64(mapEntrySize))
		}
	}
	return n
}

func sovInterchainMeta(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterchainMeta(x uint64) (n int) {
	return sovInterchainMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = make(map[string]*Uint64Slice)
			}
			var mapkey string
			var mapvalue *Uint64Slice
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Uint64Slice{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInterchainMeta(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Counter[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Roots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_meshplus_bitxhub_kit_types.Hash
			m.L2Roots = append(m.L2Roots, v)
			if err := m.L2Roots[len(m.L2Roots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutCounter == nil {
				m.TimeoutCounter = make(map[string]*StringSlice)
			}
			var mapkey string
			var mapvalue *StringSlice
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringSlice{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInterchainMeta(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TimeoutCounter[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutL2Roots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_meshplus_bitxhub_kit_types.Hash
			m.TimeoutL2Roots = append(m.TimeoutL2Roots, v)
			if err := m.TimeoutL2Roots[len(m.TimeoutL2Roots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Uint64Slice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint64Slice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint64Slice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Slice = append(m.Slice, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInterchainMeta
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInterchainMeta
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Slice) == 0 {
					m.Slice = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Slice = append(m.Slice, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slice = append(m.Slice, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interchain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interchain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interchain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterchainCounter == nil {
				m.InterchainCounter = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInterchainMeta(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InterchainCounter[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceiptCounter == nil {
				m.ReceiptCounter = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInterchainMeta(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReceiptCounter[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceReceiptCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceReceiptCounter == nil {
				m.SourceReceiptCounter = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterchainMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterchainMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInterchainMeta(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInterchainMeta
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SourceReceiptCounter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterchainMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterchainMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterchainMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterchainMeta
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterchainMeta
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterchainMeta
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterchainMeta        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterchainMeta          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterchainMeta = fmt.Errorf("proto: unexpected end of group")
)
