// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message_Type int32

const (
	Message_GET_BLOCK                     Message_Type = 0
	Message_GET_BLOCK_ACK                 Message_Type = 1
	Message_CONSENSUS                     Message_Type = 2
	Message_FETCH_CERT                    Message_Type = 3
	Message_FETCH_CERT_ACK                Message_Type = 4
	Message_FETCH_BLOCK_SIGN              Message_Type = 5
	Message_FETCH_BLOCK_SIGN_ACK          Message_Type = 6
	Message_FETCH_IBTP_SIGN               Message_Type = 7
	Message_FETCH_IBTP_SIGN_ACK           Message_Type = 8
	Message_FETCH_ASSET_EXCHANGE_SIGN     Message_Type = 9
	Message_FETCH_ASSET_EXCHANGE_SIGN_ACK Message_Type = 10
	Message_GET_ADDRESS                   Message_Type = 11
	Message_GET_ADDRESS_ACK               Message_Type = 12
	Message_GET_BLOCK_HEADERS             Message_Type = 13
	Message_GET_BLOCK_HEADERS_ACK         Message_Type = 14
	Message_GET_BLOCKS                    Message_Type = 15
	Message_GET_BLOCKS_ACK                Message_Type = 16
	Message_CHECK_MASTER_PIER             Message_Type = 17
	Message_CHECK_MASTER_PIER_ACK         Message_Type = 18
	Message_FETCH_BURN_SIGN               Message_Type = 21
	Message_FETCH_BURN_SIGN_ACK           Message_Type = 22
	//pier message
	Message_APPCHAIN_REGISTER        Message_Type = 23
	Message_APPCHAIN_UPDATE          Message_Type = 24
	Message_APPCHAIN_GET             Message_Type = 25
	Message_INTERCHAIN_META_GET      Message_Type = 26
	Message_RULE_DEPLOY              Message_Type = 27
	Message_IBTP_GET                 Message_Type = 28
	Message_IBTP_SEND                Message_Type = 29
	Message_IBTP_RECEIPT_SEND        Message_Type = 30
	Message_ROUTER_IBTP_SEND         Message_Type = 31
	Message_ROUTER_IBTP_RECEIPT_SEND Message_Type = 32
	Message_ADDRESS_GET              Message_Type = 33
	Message_ROUTER_INTERCHAIN_SEND   Message_Type = 34
	Message_ACK                      Message_Type = 35
	// pier pangolin message
	Message_PIER_SEND_TRANSACTION                     Message_Type = 36
	Message_PIER_GET_TRANSACTION                      Message_Type = 37
	Message_PIER_SEND_VIEW                            Message_Type = 38
	Message_PIER_GET_RECEIPT                          Message_Type = 39
	Message_PIER_GET_MULTI_SIGNS                      Message_Type = 40
	Message_PIER_SUBSCRIBE_BLOCK_HEADER               Message_Type = 41
	Message_PIER_SUBSCRIBE_BLOCK_HEADER_ACK           Message_Type = 42
	Message_PIER_SUBSCRIBE_INTERCHAIN_TX_WRAPPERS     Message_Type = 43
	Message_PIER_SUBSCRIBE_INTERCHAIN_TX_WRAPPERS_ACK Message_Type = 44
	Message_PIER_GET_CHAIN_META                       Message_Type = 45
	Message_PIER_GET_INTERCHAIN_TX_WRAPPERS           Message_Type = 46
	Message_PIER_GET_BLOCK_HEADER                     Message_Type = 47
	Message_PIER_GET_PENDING_NONCE_BY_ACCOUNT         Message_Type = 48
	Message_PIER_CHECK_MASTER_PIER                    Message_Type = 49
	Message_PIER_SET_MASTER_PIER                      Message_Type = 50
	Message_PIER_HEART_BEAT                           Message_Type = 51
	Message_PIER_GET_RECEIVE_PANGOLIN_ADDR            Message_Type = 52
)

var Message_Type_name = map[int32]string{
	0:  "GET_BLOCK",
	1:  "GET_BLOCK_ACK",
	2:  "CONSENSUS",
	3:  "FETCH_CERT",
	4:  "FETCH_CERT_ACK",
	5:  "FETCH_BLOCK_SIGN",
	6:  "FETCH_BLOCK_SIGN_ACK",
	7:  "FETCH_IBTP_SIGN",
	8:  "FETCH_IBTP_SIGN_ACK",
	9:  "FETCH_ASSET_EXCHANGE_SIGN",
	10: "FETCH_ASSET_EXCHANGE_SIGN_ACK",
	11: "GET_ADDRESS",
	12: "GET_ADDRESS_ACK",
	13: "GET_BLOCK_HEADERS",
	14: "GET_BLOCK_HEADERS_ACK",
	15: "GET_BLOCKS",
	16: "GET_BLOCKS_ACK",
	17: "CHECK_MASTER_PIER",
	18: "CHECK_MASTER_PIER_ACK",
	21: "FETCH_BURN_SIGN",
	22: "FETCH_BURN_SIGN_ACK",
	23: "APPCHAIN_REGISTER",
	24: "APPCHAIN_UPDATE",
	25: "APPCHAIN_GET",
	26: "INTERCHAIN_META_GET",
	27: "RULE_DEPLOY",
	28: "IBTP_GET",
	29: "IBTP_SEND",
	30: "IBTP_RECEIPT_SEND",
	31: "ROUTER_IBTP_SEND",
	32: "ROUTER_IBTP_RECEIPT_SEND",
	33: "ADDRESS_GET",
	34: "ROUTER_INTERCHAIN_SEND",
	35: "ACK",
	36: "PIER_SEND_TRANSACTION",
	37: "PIER_GET_TRANSACTION",
	38: "PIER_SEND_VIEW",
	39: "PIER_GET_RECEIPT",
	40: "PIER_GET_MULTI_SIGNS",
	41: "PIER_SUBSCRIBE_BLOCK_HEADER",
	42: "PIER_SUBSCRIBE_BLOCK_HEADER_ACK",
	43: "PIER_SUBSCRIBE_INTERCHAIN_TX_WRAPPERS",
	44: "PIER_SUBSCRIBE_INTERCHAIN_TX_WRAPPERS_ACK",
	45: "PIER_GET_CHAIN_META",
	46: "PIER_GET_INTERCHAIN_TX_WRAPPERS",
	47: "PIER_GET_BLOCK_HEADER",
	48: "PIER_GET_PENDING_NONCE_BY_ACCOUNT",
	49: "PIER_CHECK_MASTER_PIER",
	50: "PIER_SET_MASTER_PIER",
	51: "PIER_HEART_BEAT",
	52: "PIER_GET_RECEIVE_PANGOLIN_ADDR",
}

var Message_Type_value = map[string]int32{
	"GET_BLOCK":                                 0,
	"GET_BLOCK_ACK":                             1,
	"CONSENSUS":                                 2,
	"FETCH_CERT":                                3,
	"FETCH_CERT_ACK":                            4,
	"FETCH_BLOCK_SIGN":                          5,
	"FETCH_BLOCK_SIGN_ACK":                      6,
	"FETCH_IBTP_SIGN":                           7,
	"FETCH_IBTP_SIGN_ACK":                       8,
	"FETCH_ASSET_EXCHANGE_SIGN":                 9,
	"FETCH_ASSET_EXCHANGE_SIGN_ACK":             10,
	"GET_ADDRESS":                               11,
	"GET_ADDRESS_ACK":                           12,
	"GET_BLOCK_HEADERS":                         13,
	"GET_BLOCK_HEADERS_ACK":                     14,
	"GET_BLOCKS":                                15,
	"GET_BLOCKS_ACK":                            16,
	"CHECK_MASTER_PIER":                         17,
	"CHECK_MASTER_PIER_ACK":                     18,
	"FETCH_BURN_SIGN":                           21,
	"FETCH_BURN_SIGN_ACK":                       22,
	"APPCHAIN_REGISTER":                         23,
	"APPCHAIN_UPDATE":                           24,
	"APPCHAIN_GET":                              25,
	"INTERCHAIN_META_GET":                       26,
	"RULE_DEPLOY":                               27,
	"IBTP_GET":                                  28,
	"IBTP_SEND":                                 29,
	"IBTP_RECEIPT_SEND":                         30,
	"ROUTER_IBTP_SEND":                          31,
	"ROUTER_IBTP_RECEIPT_SEND":                  32,
	"ADDRESS_GET":                               33,
	"ROUTER_INTERCHAIN_SEND":                    34,
	"ACK":                                       35,
	"PIER_SEND_TRANSACTION":                     36,
	"PIER_GET_TRANSACTION":                      37,
	"PIER_SEND_VIEW":                            38,
	"PIER_GET_RECEIPT":                          39,
	"PIER_GET_MULTI_SIGNS":                      40,
	"PIER_SUBSCRIBE_BLOCK_HEADER":               41,
	"PIER_SUBSCRIBE_BLOCK_HEADER_ACK":           42,
	"PIER_SUBSCRIBE_INTERCHAIN_TX_WRAPPERS":     43,
	"PIER_SUBSCRIBE_INTERCHAIN_TX_WRAPPERS_ACK": 44,
	"PIER_GET_CHAIN_META":                       45,
	"PIER_GET_INTERCHAIN_TX_WRAPPERS":           46,
	"PIER_GET_BLOCK_HEADER":                     47,
	"PIER_GET_PENDING_NONCE_BY_ACCOUNT":         48,
	"PIER_CHECK_MASTER_PIER":                    49,
	"PIER_SET_MASTER_PIER":                      50,
	"PIER_HEART_BEAT":                           51,
	"PIER_GET_RECEIVE_PANGOLIN_ADDR":            52,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}

func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0, 0}
}

type Message struct {
	From    string       `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	Type    Message_Type `protobuf:"varint,2,opt,name=type,proto3,enum=pb.Message_Type" json:"type,omitempty"`
	Data    []byte       `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Version []byte       `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_GET_BLOCK
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

type PierPayload struct {
	Ok   bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *PierPayload) Reset()         { *m = PierPayload{} }
func (m *PierPayload) String() string { return proto.CompactTextString(m) }
func (*PierPayload) ProtoMessage()    {}
func (*PierPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}
func (m *PierPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PierPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PierPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PierPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PierPayload.Merge(m, src)
}
func (m *PierPayload) XXX_Size() int {
	return m.Size()
}
func (m *PierPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PierPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PierPayload proto.InternalMessageInfo

func (m *PierPayload) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PierPayload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*PierPayload)(nil), "pb.PierPayload")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x6e, 0xdb, 0x36,
	0x14, 0xb5, 0x1c, 0xaf, 0x8e, 0x6f, 0x6c, 0x87, 0xb9, 0x6d, 0x5a, 0xa5, 0x6d, 0x14, 0xc7, 0x6d,
	0x36, 0x67, 0x5b, 0xbd, 0xb5, 0xdd, 0x0f, 0x50, 0x12, 0x6b, 0x0b, 0xb1, 0x29, 0x81, 0xa2, 0xd2,
	0xf6, 0x49, 0x70, 0x30, 0x63, 0x08, 0xb2, 0xc5, 0x86, 0x63, 0x60, 0xc8, 0x5f, 0xec, 0xb3, 0xf6,
	0x98, 0xc7, 0xed, 0x6d, 0x48, 0xb0, 0xff, 0x18, 0x2e, 0x95, 0x48, 0xb6, 0x83, 0x0c, 0x7d, 0x13,
	0xcf, 0x39, 0xf7, 0xea, 0xf2, 0x1c, 0x92, 0xd0, 0x38, 0x1f, 0xcf, 0x7f, 0x9f, 0xcc, 0xce, 0xba,
	0xd3, 0xd9, 0x64, 0x3e, 0xc1, 0xf2, 0xf4, 0xa4, 0xfd, 0x37, 0x40, 0x75, 0x38, 0xbe, 0xb8, 0x18,
	0xfd, 0x32, 0x46, 0x84, 0xca, 0x87, 0xd9, 0xe4, 0x37, 0xdb, 0x6a, 0x59, 0x9d, 0x9a, 0x32, 0xdf,
	0xf8, 0x1a, 0x2a, 0xf3, 0xcb, 0xe9, 0xd8, 0x2e, 0xb7, 0xac, 0x4e, 0xf3, 0x1d, 0xeb, 0x4e, 0x4f,
	0xba, 0xb7, 0xf2, 0xae, 0xbe, 0x9c, 0x8e, 0x95, 0x61, 0xa9, 0xd2, 0x1f, 0xcd, 0x47, 0xf6, 0x5a,
	0xcb, 0xea, 0xd4, 0x95, 0xf9, 0x46, 0x1b, 0xaa, 0xc7, 0xe3, 0xd9, 0xc5, 0xe9, 0xe4, 0xdc, 0xae,
	0x18, 0xf8, 0x6e, 0xd9, 0xfe, 0xb7, 0x06, 0x15, 0x2a, 0xc6, 0x06, 0xd4, 0x7a, 0x42, 0xa7, 0xee,
	0x20, 0xf4, 0x8e, 0x58, 0x09, 0xb7, 0xa0, 0x91, 0x2f, 0x53, 0xee, 0x1d, 0x31, 0x8b, 0x14, 0x5e,
	0x28, 0x63, 0x21, 0xe3, 0x24, 0x66, 0x65, 0x6c, 0x02, 0x7c, 0x10, 0xda, 0xeb, 0xa7, 0x9e, 0x50,
	0x9a, 0xad, 0x21, 0x42, 0xb3, 0x58, 0x9b, 0x92, 0x0a, 0x3e, 0x01, 0x96, 0x61, 0x59, 0x9f, 0x38,
	0xe8, 0x49, 0xf6, 0x15, 0xda, 0xf0, 0x64, 0x15, 0x35, 0xfa, 0x47, 0xf8, 0x18, 0x36, 0x33, 0x26,
	0x70, 0x75, 0x94, 0xc9, 0xab, 0xf8, 0x0c, 0x1e, 0xaf, 0x80, 0x46, 0xbd, 0x8e, 0xbb, 0xb0, 0x93,
	0x11, 0x3c, 0x8e, 0x85, 0x4e, 0xc5, 0x27, 0xaf, 0xcf, 0x65, 0x4f, 0x64, 0x75, 0x35, 0xdc, 0x87,
	0xdd, 0x07, 0x69, 0xd3, 0x01, 0x70, 0x13, 0x36, 0x68, 0x97, 0xdc, 0xf7, 0x95, 0x88, 0x63, 0xb6,
	0x41, 0x03, 0x2c, 0x00, 0x46, 0x55, 0xc7, 0x6d, 0xd8, 0x2a, 0xbc, 0xe8, 0x0b, 0xee, 0x0b, 0x15,
	0xb3, 0x06, 0xee, 0xc0, 0xf6, 0x3d, 0xd8, 0x54, 0x34, 0xc9, 0x9b, 0x9c, 0x8a, 0xd9, 0x26, 0x79,
	0x53, 0xac, 0x8d, 0x86, 0x51, 0x57, 0xaf, 0x2f, 0xbc, 0xa3, 0x74, 0xc8, 0x63, 0x2d, 0x54, 0x1a,
	0x05, 0x42, 0xb1, 0x2d, 0xea, 0x7a, 0x0f, 0x36, 0x15, 0x58, 0xb8, 0xe3, 0x26, 0x4a, 0x66, 0xbb,
	0xdc, 0x2e, 0xdc, 0xc9, 0x41, 0xa3, 0x7e, 0x4a, 0xfd, 0x79, 0x14, 0x79, 0x7d, 0x1e, 0xc8, 0x54,
	0x89, 0x5e, 0x40, 0xdd, 0xd8, 0x33, 0x6a, 0x92, 0xc3, 0x49, 0xe4, 0x73, 0x2d, 0x98, 0x8d, 0x0c,
	0xea, 0x39, 0xd8, 0x13, 0x9a, 0xed, 0x50, 0xdb, 0x40, 0x6a, 0xa1, 0x32, 0x6c, 0x28, 0x34, 0x37,
	0xc4, 0x73, 0xb2, 0x4c, 0x25, 0x03, 0x91, 0xfa, 0x22, 0x1a, 0x84, 0x9f, 0xd9, 0x0b, 0xac, 0xc3,
	0xba, 0x09, 0x86, 0xe8, 0x97, 0x74, 0x48, 0xb2, 0x98, 0x84, 0xf4, 0xd9, 0x2e, 0x0d, 0x61, 0x96,
	0x4a, 0x78, 0x22, 0x88, 0x74, 0x06, 0x3b, 0x74, 0x2e, 0x54, 0x98, 0xd0, 0xf6, 0x0a, 0xf1, 0x1e,
	0xbe, 0x04, 0x7b, 0x11, 0x5d, 0xaa, 0x69, 0xd1, 0x8f, 0xef, 0x62, 0xa1, 0x5f, 0xed, 0xe3, 0x73,
	0x78, 0x7a, 0x27, 0x2f, 0x26, 0x35, 0xe2, 0x36, 0x56, 0x61, 0x8d, 0x5c, 0x78, 0x45, 0x76, 0x1a,
	0x07, 0x09, 0x4f, 0xb5, 0xe2, 0x32, 0xe6, 0x9e, 0x0e, 0x42, 0xc9, 0x5e, 0xd3, 0x31, 0x34, 0x14,
	0x25, 0xb3, 0xc8, 0x1c, 0x50, 0x5c, 0x45, 0xd1, 0x71, 0x20, 0x3e, 0xb2, 0xaf, 0x69, 0xe4, 0x5c,
	0x7d, 0x3b, 0x19, 0xfb, 0x66, 0xa9, 0xc7, 0x30, 0x19, 0xe8, 0xc0, 0x24, 0x10, 0xb3, 0x0e, 0xee,
	0xc1, 0x8b, 0xac, 0x47, 0xe2, 0xc6, 0x9e, 0x0a, 0x5c, 0xb1, 0x74, 0x50, 0xd8, 0x21, 0xbe, 0x82,
	0xbd, 0xff, 0x11, 0x98, 0x10, 0xbf, 0xc5, 0x43, 0x38, 0x58, 0x11, 0x2d, 0xec, 0x55, 0x7f, 0x4a,
	0x3f, 0x2a, 0x1e, 0x45, 0x74, 0x1c, 0xbf, 0xc3, 0x37, 0x70, 0xf8, 0x45, 0x52, 0xd3, 0xf9, 0x7b,
	0x0a, 0x38, 0x9f, 0xbc, 0x08, 0x99, 0xbd, 0xc9, 0xe7, 0x22, 0xe2, 0x81, 0x9f, 0x75, 0x73, 0x5b,
	0x57, 0x2f, 0x00, 0xfb, 0x01, 0x0f, 0x60, 0x3f, 0xa7, 0x22, 0x21, 0xfd, 0x40, 0xf6, 0x52, 0x19,
	0x4a, 0x4f, 0xa4, 0xee, 0xe7, 0x94, 0x7b, 0x5e, 0x98, 0x48, 0xcd, 0x7e, 0xa4, 0xf4, 0x8c, 0xec,
	0xfe, 0x1d, 0x78, 0x9b, 0xbb, 0x4a, 0xd7, 0x76, 0x91, 0x79, 0x47, 0xa7, 0xd7, 0x30, 0x7d, 0xc1,
	0x95, 0x4e, 0x5d, 0xc1, 0x35, 0x7b, 0x8f, 0x6d, 0x70, 0x96, 0xa3, 0x39, 0x16, 0x69, 0xc4, 0x65,
	0x2f, 0x1c, 0x04, 0xd2, 0x5c, 0x65, 0xf6, 0x53, 0xfb, 0x2d, 0x6c, 0x44, 0xa7, 0xe3, 0x59, 0x34,
	0xba, 0xfc, 0x75, 0x32, 0xfa, 0x19, 0x9b, 0x50, 0x0e, 0xcf, 0xcc, 0xe3, 0xba, 0xae, 0xca, 0xe1,
	0x59, 0xfe, 0x68, 0x96, 0x8b, 0x47, 0xd3, 0xb5, 0xff, 0xbc, 0x76, 0xac, 0xab, 0x6b, 0xc7, 0xfa,
	0xe7, 0xda, 0xb1, 0xfe, 0xb8, 0x71, 0x4a, 0x57, 0x37, 0x4e, 0xe9, 0xaf, 0x1b, 0xa7, 0x74, 0xf2,
	0xc8, 0xbc, 0xd9, 0xef, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x6e, 0x33, 0x46, 0xc4, 0x05,
	0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PierPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PierPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PierPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNetwork(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *PierPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Message_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PierPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PierPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PierPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
