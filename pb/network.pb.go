// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message_Type int32

const (
	Message_GET_BLOCK                     Message_Type = 0
	Message_GET_BLOCK_ACK                 Message_Type = 1
	Message_CONSENSUS                     Message_Type = 2
	Message_FETCH_CERT                    Message_Type = 3
	Message_FETCH_CERT_ACK                Message_Type = 4
	Message_FETCH_BLOCK_SIGN              Message_Type = 5
	Message_FETCH_BLOCK_SIGN_ACK          Message_Type = 6
	Message_FETCH_IBTP_SIGN               Message_Type = 7
	Message_FETCH_IBTP_SIGN_ACK           Message_Type = 8
	Message_FETCH_ASSET_EXCHANEG_SIGN     Message_Type = 9
	Message_FETCH_ASSET_EXCHANGE_SIGN_ACK Message_Type = 10
	Message_GET_ADDRESS                   Message_Type = 11
	Message_GET_ADDRESS_ACK               Message_Type = 12
)

var Message_Type_name = map[int32]string{
	0:  "GET_BLOCK",
	1:  "GET_BLOCK_ACK",
	2:  "CONSENSUS",
	3:  "FETCH_CERT",
	4:  "FETCH_CERT_ACK",
	5:  "FETCH_BLOCK_SIGN",
	6:  "FETCH_BLOCK_SIGN_ACK",
	7:  "FETCH_IBTP_SIGN",
	8:  "FETCH_IBTP_SIGN_ACK",
	9:  "FETCH_ASSET_EXCHANEG_SIGN",
	10: "FETCH_ASSET_EXCHANGE_SIGN_ACK",
	11: "GET_ADDRESS",
	12: "GET_ADDRESS_ACK",
}

var Message_Type_value = map[string]int32{
	"GET_BLOCK":                     0,
	"GET_BLOCK_ACK":                 1,
	"CONSENSUS":                     2,
	"FETCH_CERT":                    3,
	"FETCH_CERT_ACK":                4,
	"FETCH_BLOCK_SIGN":              5,
	"FETCH_BLOCK_SIGN_ACK":          6,
	"FETCH_IBTP_SIGN":               7,
	"FETCH_IBTP_SIGN_ACK":           8,
	"FETCH_ASSET_EXCHANEG_SIGN":     9,
	"FETCH_ASSET_EXCHANGE_SIGN_ACK": 10,
	"GET_ADDRESS":                   11,
	"GET_ADDRESS_ACK":               12,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}

func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0, 0}
}

type Message struct {
	Type    Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.Message_Type" json:"type,omitempty"`
	Data    []byte       `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Version []byte       `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_GET_BLOCK
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterType((*Message)(nil), "pb.Message")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4e, 0xc2, 0x40,
	0x14, 0xc6, 0x3b, 0xa5, 0x82, 0x3c, 0xfe, 0x8d, 0x0f, 0x12, 0xeb, 0x82, 0x06, 0x89, 0x0b, 0x56,
	0x5d, 0xe8, 0x09, 0x4a, 0x19, 0x0b, 0x41, 0x8b, 0xe9, 0x8c, 0xc6, 0x5d, 0x03, 0xc9, 0xc4, 0x18,
	0x13, 0xda, 0x40, 0x13, 0xc3, 0xd2, 0x1b, 0x78, 0x05, 0x6f, 0xe3, 0x92, 0xa5, 0x4b, 0x03, 0x17,
	0x31, 0x9d, 0x51, 0x31, 0xb8, 0x9b, 0xf7, 0xfd, 0x7e, 0xdf, 0xcb, 0x4c, 0x06, 0x6a, 0x73, 0x99,
	0x3d, 0x27, 0x8b, 0x27, 0x37, 0x5d, 0x24, 0x59, 0x82, 0x66, 0x3a, 0xeb, 0xbe, 0x14, 0xa0, 0x74,
	0x2d, 0x97, 0xcb, 0xe9, 0x83, 0xc4, 0x33, 0xb0, 0xb2, 0x55, 0x2a, 0x6d, 0xd2, 0x21, 0xbd, 0xfa,
	0x39, 0x75, 0xd3, 0x99, 0xfb, 0x8d, 0x5c, 0xb1, 0x4a, 0x65, 0xa4, 0x28, 0x22, 0x58, 0x83, 0x69,
	0x36, 0xb5, 0xcd, 0x0e, 0xe9, 0x55, 0x23, 0x75, 0x46, 0x1b, 0x4a, 0x77, 0x72, 0xb1, 0x7c, 0x4c,
	0xe6, 0x76, 0x41, 0xc5, 0x3f, 0x63, 0xf7, 0xcd, 0x04, 0x2b, 0x2f, 0x63, 0x0d, 0xca, 0x01, 0x13,
	0x71, 0xff, 0x6a, 0xe2, 0x8f, 0xa9, 0x81, 0x47, 0x50, 0xfb, 0x1d, 0x63, 0xcf, 0x1f, 0x53, 0x92,
	0x1b, 0xfe, 0x24, 0xe4, 0x2c, 0xe4, 0xb7, 0x9c, 0x9a, 0x58, 0x07, 0xb8, 0x64, 0xc2, 0x1f, 0xc6,
	0x3e, 0x8b, 0x04, 0x2d, 0x20, 0x42, 0x7d, 0x37, 0xab, 0x8a, 0x85, 0x2d, 0xa0, 0x3a, 0xd3, 0x7b,
	0xf8, 0x28, 0x08, 0xe9, 0x01, 0xda, 0xd0, 0xda, 0x4f, 0x95, 0x5f, 0xc4, 0x26, 0x34, 0x34, 0x19,
	0xf5, 0xc5, 0x8d, 0xd6, 0x4b, 0x78, 0x0c, 0xcd, 0xbd, 0x50, 0xd9, 0x87, 0xd8, 0x86, 0x13, 0x0d,
	0x3c, 0xce, 0x99, 0x88, 0xd9, 0xbd, 0x3f, 0xf4, 0x42, 0x16, 0xe8, 0x5e, 0x19, 0x4f, 0xa1, 0xfd,
	0x1f, 0x07, 0x6c, 0xb7, 0x01, 0xb0, 0x01, 0x95, 0xfc, 0x95, 0xde, 0x60, 0x10, 0x31, 0xce, 0x69,
	0x25, 0xbf, 0xc0, 0x9f, 0x40, 0x59, 0xd5, 0xbe, 0xfd, 0xbe, 0x71, 0xc8, 0x7a, 0xe3, 0x90, 0xcf,
	0x8d, 0x43, 0x5e, 0xb7, 0x8e, 0xb1, 0xde, 0x3a, 0xc6, 0xc7, 0xd6, 0x31, 0x66, 0x45, 0xf5, 0x51,
	0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x14, 0xc1, 0x4b, 0xb9, 0x01, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintNetwork(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovNetwork(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Message_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
