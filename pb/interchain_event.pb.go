// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interchain_event.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterchainStatus struct {
	From string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Hash string `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *InterchainStatus) Reset()         { *m = InterchainStatus{} }
func (m *InterchainStatus) String() string { return proto.CompactTextString(m) }
func (*InterchainStatus) ProtoMessage()    {}
func (*InterchainStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b708a39ce8526d, []int{0}
}
func (m *InterchainStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainStatus.Merge(m, src)
}
func (m *InterchainStatus) XXX_Size() int {
	return m.Size()
}
func (m *InterchainStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainStatus proto.InternalMessageInfo

func (m *InterchainStatus) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *InterchainStatus) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *InterchainStatus) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type InterchainEvent struct {
	InterchainTx      []*InterchainStatus `protobuf:"bytes,1,rep,name=InterchainTx,proto3" json:"InterchainTx,omitempty"`
	InterchainReceipt []*InterchainStatus `protobuf:"bytes,2,rep,name=InterchainReceipt,proto3" json:"InterchainReceipt,omitempty"`
	InterchainConfirm []*InterchainStatus `protobuf:"bytes,3,rep,name=InterchainConfirm,proto3" json:"InterchainConfirm,omitempty"`
	InterchainTxCount uint64              `protobuf:"varint,4,opt,name=InterchainTxCount,proto3" json:"InterchainTxCount,omitempty"`
	BlockHeight       uint64              `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
}

func (m *InterchainEvent) Reset()         { *m = InterchainEvent{} }
func (m *InterchainEvent) String() string { return proto.CompactTextString(m) }
func (*InterchainEvent) ProtoMessage()    {}
func (*InterchainEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b708a39ce8526d, []int{1}
}
func (m *InterchainEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainEvent.Merge(m, src)
}
func (m *InterchainEvent) XXX_Size() int {
	return m.Size()
}
func (m *InterchainEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainEvent.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainEvent proto.InternalMessageInfo

func (m *InterchainEvent) GetInterchainTx() []*InterchainStatus {
	if m != nil {
		return m.InterchainTx
	}
	return nil
}

func (m *InterchainEvent) GetInterchainReceipt() []*InterchainStatus {
	if m != nil {
		return m.InterchainReceipt
	}
	return nil
}

func (m *InterchainEvent) GetInterchainConfirm() []*InterchainStatus {
	if m != nil {
		return m.InterchainConfirm
	}
	return nil
}

func (m *InterchainEvent) GetInterchainTxCount() uint64 {
	if m != nil {
		return m.InterchainTxCount
	}
	return 0
}

func (m *InterchainEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*InterchainStatus)(nil), "pb.InterchainStatus")
	proto.RegisterType((*InterchainEvent)(nil), "pb.InterchainEvent")
}

func init() { proto.RegisterFile("interchain_event.proto", fileDescriptor_97b708a39ce8526d) }

var fileDescriptor_97b708a39ce8526d = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0xcc, 0x2b, 0x49,
	0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xf2, 0xe2, 0x12, 0xf0, 0x84, 0xcb, 0x06, 0x97, 0x24,
	0x96, 0x94, 0x16, 0x0b, 0x09, 0x71, 0xb1, 0xb8, 0x15, 0xe5, 0xe7, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x81, 0xd9, 0x42, 0x7c, 0x5c, 0x4c, 0x21, 0xf9, 0x12, 0x4c, 0x60, 0x11, 0xa6, 0x90,
	0x7c, 0x90, 0x1a, 0x8f, 0xc4, 0xe2, 0x0c, 0x09, 0x66, 0x88, 0x1a, 0x10, 0x5b, 0x69, 0x31, 0x13,
	0x17, 0x3f, 0xc2, 0x30, 0x57, 0x90, 0x4d, 0x42, 0x16, 0x5c, 0x3c, 0x08, 0xa1, 0x90, 0x0a, 0x09,
	0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x11, 0xbd, 0x82, 0x24, 0x3d, 0x74, 0x7b, 0x83, 0x50, 0x54,
	0x0a, 0x39, 0x71, 0x09, 0x22, 0xf8, 0x41, 0xa9, 0xc9, 0xa9, 0x99, 0x05, 0x25, 0x12, 0x4c, 0x78,
	0xb4, 0x63, 0x2a, 0x47, 0x35, 0xc3, 0x39, 0x3f, 0x2f, 0x2d, 0xb3, 0x28, 0x57, 0x82, 0x99, 0x38,
	0x33, 0xa0, 0xca, 0x85, 0x74, 0x90, 0xcd, 0x08, 0xa9, 0x70, 0xce, 0x2f, 0xcd, 0x2b, 0x91, 0x60,
	0x51, 0x60, 0xd4, 0x60, 0x09, 0xc2, 0x94, 0x10, 0x52, 0xe0, 0xe2, 0x76, 0xca, 0xc9, 0x4f, 0xce,
	0xf6, 0x48, 0xcd, 0x4c, 0xcf, 0x28, 0x91, 0x60, 0x05, 0xab, 0x43, 0x16, 0x72, 0x92, 0x3f, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x56, 0x3d, 0x3d, 0xfd, 0x82, 0xa4, 0x24,
	0x36, 0x70, 0xec, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x8b, 0x1d, 0x86, 0xb7, 0x01,
	0x00, 0x00,
}

func (m *InterchainStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintInterchainEvent(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintInterchainEvent(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintInterchainEvent(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintInterchainEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.InterchainTxCount != 0 {
		i = encodeVarintInterchainEvent(dAtA, i, uint64(m.InterchainTxCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InterchainConfirm) > 0 {
		for iNdEx := len(m.InterchainConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterchainConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InterchainReceipt) > 0 {
		for iNdEx := len(m.InterchainReceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterchainReceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InterchainTx) > 0 {
		for iNdEx := len(m.InterchainTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterchainTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterchainEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterchainEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovInterchainEvent(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovInterchainEvent(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovInterchainEvent(uint64(l))
	}
	return n
}

func (m *InterchainEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InterchainTx) > 0 {
		for _, e := range m.InterchainTx {
			l = e.Size()
			n += 1 + l + sovInterchainEvent(uint64(l))
		}
	}
	if len(m.InterchainReceipt) > 0 {
		for _, e := range m.InterchainReceipt {
			l = e.Size()
			n += 1 + l + sovInterchainEvent(uint64(l))
		}
	}
	if len(m.InterchainConfirm) > 0 {
		for _, e := range m.InterchainConfirm {
			l = e.Size()
			n += 1 + l + sovInterchainEvent(uint64(l))
		}
	}
	if m.InterchainTxCount != 0 {
		n += 1 + sovInterchainEvent(uint64(m.InterchainTxCount))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovInterchainEvent(uint64(m.BlockHeight))
	}
	return n
}

func sovInterchainEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterchainEvent(x uint64) (n int) {
	return sovInterchainEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainTx = append(m.InterchainTx, &InterchainStatus{})
			if err := m.InterchainTx[len(m.InterchainTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainReceipt = append(m.InterchainReceipt, &InterchainStatus{})
			if err := m.InterchainReceipt[len(m.InterchainReceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainConfirm = append(m.InterchainConfirm, &InterchainStatus{})
			if err := m.InterchainConfirm[len(m.InterchainConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainTxCount", wireType)
			}
			m.InterchainTxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterchainTxCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterchainEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterchainEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterchainEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterchainEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterchainEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterchainEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterchainEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterchainEvent = fmt.Errorf("proto: unexpected end of group")
)
